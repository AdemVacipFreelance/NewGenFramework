û"
6E:\src\NewGenSource\BayiPuan\FwGen\CreateController.cs
	namespace 	
FwGen
 
{		 
public

 

class

 
CreateController

 !
{ 
List 
< 
Type 
> 
types 
= 
new 
List #
<# $
Type$ (
>( )
() *
)* +
;+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
} 	
private!! 
void!! 
GenerateClassFiles!! '
(!!' (
string!!( .
path!!/ 3
)!!3 4
{"" 	
foreach## 
(## 
var## 
type## 
in##  
types##! &
)##& '
{$$ 
var%% 
content%% 
=%% "
GenerateClassFilesType%% 4
(%%4 5
type%%5 9
)%%9 :
;%%: ;
if&& 
(&& 
!&& 
type&& 
.&& 
FullName&& "
.&&" #
Contains&&# +
(&&+ ,
$str&&, 9
)&&9 :
)&&: ;
File'' 
.'' 
WriteAllText'' %
(''% &
path''& *
+''+ ,
type''- 1
.''1 2
Name''2 6
+''7 8
$str''9 H
,''H I
content''J Q
,''Q R
System''S Y
.''Y Z
Text''Z ^
.''^ _
Encoding''_ g
.''g h
UTF8''h l
)''l m
;''m n
}(( 
})) 	
private++ 
string++ "
GenerateClassFilesType++ -
(++- .
Type++. 2
type++3 7
)++7 8
{,, 	
var-- 
projectName-- 
=-- 
Form1-- #
.--# $
frm--$ '
.--' (
txtProjectName--( 6
.--6 7
Text--7 ;
;--; <
return// 
fmtClassFile// 
.00 
Replace00 
(00 
$str00 &
,00& '
type00( ,
.00, -
Name00- 1
)001 2
.11 
Replace11 
(11 
$str11 -
,11- .
type11/ 3
.113 4
Name114 8
.118 9
	Substring119 B
(11B C
$num11C D
,11D E
$num11E F
)11F G
.11G H
ToLower11H O
(11O P
)11P Q
+11Q R
type11R V
.11V W
Name11W [
.11[ \
	Substring11\ e
(11e f
$num11f g
,11g h
type11h l
.11l m
Name11m q
.11q r
Length11r x
-11x y
$num11y z
)11z {
)11{ |
.22 
Replace22 
(22 
$str22 (
,22( )
projectName22* 5
)225 6
;226 7
}44 	
private88 
const88 
string88 
fmtClassFile88 )
=88* +
$str	8Á, 
;
ÁÁ 
}
ÂÂ 
}ÃÃ û 
EE:\src\NewGenSource\BayiPuan\FwGen\CreateDataAccessEfConcreteFiles.cs
	namespace 	
FwGen
 
{ 
public 

class +
CreateDataAccessEfConcreteFiles 0
{		 
List

 
<

 
Type

 
>

 
types

 
=

 
new

 
List

 #
<

# $
Type

$ (
>

( )
(

) *
)

* +
;

+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
} 	
private 
void 
GenerateClassFiles '
(' (
string( .
path/ 3
)3 4
{   	
foreach!! 
(!! 
var!! 
type!! 
in!!  
types!!! &
)!!& '
{"" 
var## 
content## 
=## "
GenerateClassFilesType## 4
(##4 5
type##5 9
)##9 :
;##: ;
if$$ 
($$ 
!$$ 
type$$ 
.$$ 
FullName$$ !
.$$! "
Contains$$" *
($$* +
$str$$+ 8
)$$8 9
)$$9 :
File%% 
.%% 
WriteAllText%% !
(%%! "
path%%" &
+%%' (
$str%%( ,
+%%, -
type%%. 2
.%%2 3
Name%%3 7
+%%8 9
$str%%: B
,%%B C
content%%D K
,%%K L
System%%M S
.%%S T
Text%%T X
.%%X Y
Encoding%%Y a
.%%a b
UTF8%%b f
)%%f g
;%%g h
}&& 
}'' 	
private** 
string** "
GenerateClassFilesType** -
(**- .
Type**. 2
type**3 7
)**7 8
{++ 	
var-- 
context-- 
=-- 
Form1-- 
.--  
frm--  #
.--# $
textBox3--$ ,
.--, -
Text--- 1
;--1 2
var.. 
projectName.. 
=.. 
Form1.. #
...# $
frm..$ '
...' (
txtProjectName..( 6
...6 7
Text..7 ;
;..; <
return// 
fmtClassFile// 
.00 
Replace00 
(00 
$str00 &
,00& '
type00( ,
.00, -
Name00- 1
)001 2
.11 
Replace11 
(11 
$str11 (
,11( )
context11) 0
)110 1
.22 
Replace22 
(22 
$str22 (
,22( )
projectName22) 4
)224 5
;225 6
}44 	
private88 
const88 
string88 
fmtClassFile88 )
=88* +
$str8C, 
;CC 
}DD 
}EE Ê$
<E:\src\NewGenSource\BayiPuan\FwGen\CreateMVCListViewModel.cs
	namespace		 	
FwGen		
 
{

 
public 

class "
CreateMvcListViewModel '
{ 
List 
< 
Type 
> 
types 
= 
new 
List #
<# $
Type$ (
>( )
() *
)* +
;+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
}   	
private"" 
void"" 
GenerateClassFiles"" '
(""' (
string""( .
path""/ 3
)""3 4
{## 	
foreach$$ 
($$ 
var$$ 
type$$ 
in$$  
types$$! &
)$$& '
{%% 
var&& 
content&& 
=&& "
GenerateClassFilesType&& 4
(&&4 5
type&&5 9
)&&9 :
;&&: ;
if'' 
('' 
!'' 
type'' 
.'' 
FullName'' "
.''" #
Contains''# +
(''+ ,
$str'', 9
)''9 :
)'': ;
File(( 
.(( 
WriteAllText(( %
(((% &
path((& *
+((+ ,
type((- 1
.((1 2
Name((2 6
+((7 8
$str((9 K
,((K L
content((M T
,((T U
System((V \
.((\ ]
Text((] a
.((a b
Encoding((b j
.((j k
UTF8((k o
)((o p
;((p q
})) 
}** 	
private,, 
string,, "
GenerateClassFilesType,, -
(,,- .
Type,,. 2
type,,3 7
),,7 8
{-- 	
var.. 
projectName.. 
=.. 
Form1.. #
...# $
frm..$ '
...' (
txtProjectName..( 6
...6 7
Text..7 ;
;..; <
var// 
str// 
=// 
type// 
.// 
Name// 
;//  
if00 
(00 
str00 
.00 
Length00 
>00 
str00  
.00  !
Length00! '
-00( )
$num00* +
&&00, .
str00/ 2
[002 3
str003 6
.006 7
Length007 =
-00> ?
$num00@ A
]00A B
==00C E
$char00F I
)00I J
{11 
str22 
=22 
str22 
.22 
Replace22  
(22  !
$str22! $
,22$ %
$str22& +
)22+ ,
;22, -
}33 
return55 
fmtClassFile55 
.66 
Replace66 
(66 
$str66 &
,66& '
type66( ,
.66, -
Name66- 1
)661 2
.77 
Replace77 
(77 
$str77 '
,77' (
str77) ,
)77, -
.88 
Replace88 
(88 
$str88 (
,88( )
projectName88* 5
)885 6
;886 7
}99 	
private;; 
const;; 
string;; 
fmtClassFile;; )
=;;* +
$str;D, 
;DD 
}EE 
}FF #
@E:\src\NewGenSource\BayiPuan\FwGen\CreateBusinessManagerFiles.cs
	namespace 	
FwGen
 
{		 
public

 

class

 &
CreateBusinessManagerFiles

 +
{ 
List 
< 
Type 
> 
types 
= 
new 
List #
<# $
Type$ (
>( )
() *
)* +
;+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
} 	
private!! 
void!! 
GenerateClassFiles!! '
(!!' (
string!!( .
path!!/ 3
)!!3 4
{"" 	
foreach## 
(## 
var## 
type## 
in##  
types##! &
)##& '
{$$ 
var%% 
content%% 
=%% "
GenerateClassFilesType%% 4
(%%4 5
type%%5 9
)%%9 :
;%%: ;
if&& 
(&& 
!&& 
type&& 
.&& 
FullName&& "
.&&" #
Contains&&# +
(&&+ ,
$str&&, 9
)&&9 :
)&&: ;
File'' 
.'' 
WriteAllText'' %
(''% &
path''& *
+''+ ,
type''- 1
.''1 2
Name''2 6
+''7 8
$str''9 E
,''E F
content''G N
,''N O
System''P V
.''V W
Text''W [
.''[ \
Encoding''\ d
.''d e
UTF8''e i
)''i j
;''j k
}(( 
})) 	
private++ 
string++ "
GenerateClassFilesType++ -
(++- .
Type++. 2
type++3 7
)++7 8
{,, 	
var-- 
projectName-- 
=-- 
Form1-- #
.--# $
frm--$ '
.--' (
txtProjectName--( 6
.--6 7
Text--7 ;
;--; <
return// 
fmtClassFile// 
.00 
Replace00 
(00 
$str00 &
,00& '
type00( ,
.00, -
Name00- 1
)001 2
.11 
Replace11 
(11 
$str11 (
,11( )
projectName11* 5
)115 6
.22 
Replace22 
(22 
$str22 -
,22- .
type22/ 3
.223 4
Name224 8
.228 9
	Substring229 B
(22B C
$num22C D
,22D E
$num22F G
)22G H
.22H I
ToLower22I P
(22P Q
)22Q R
+22S T
type22U Y
.22Y Z
Name22Z ^
.22^ _
	Substring22_ h
(22h i
$num22i j
,22j k
type22l p
.22p q
Name22q u
.22u v
Length22v |
-22} ~
$num	22 
)
22 
)
22 
;
22 
}44 	
private88 
const88 
string88 
fmtClassFile88 )
=88* +
$str8u, 
;uu 
}vv 
}ww «#
AE:\src\NewGenSource\BayiPuan\FwGen\CreateBusinessAbstractFiles.cs
	namespace 	
FwGen
 
{		 
public

 

class

 '
CreateBusinessAbstractFiles

 ,
{ 
List 
< 
Type 
> 
types 
= 
new 
List #
<# $
Type$ (
>( )
() *
)* +
;+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
} 	
private!! 
void!! 
GenerateClassFiles!! '
(!!' (
string!!( .
path!!/ 3
)!!3 4
{"" 	
foreach## 
(## 
var## 
type## 
in##  
types##! &
)##& '
{$$ 
var%% 
content%% 
=%% "
GenerateClassFilesType%% 4
(%%4 5
type%%5 9
)%%9 :
;%%: ;
if&& 
(&& 
!&& 
type&& 
.&& 
FullName&& "
.&&" #
Contains&&# +
(&&+ ,
$str&&, 9
)&&9 :
)&&: ;
File'' 
.'' 
WriteAllText'' %
(''% &
path''& *
+''+ ,
$str'', /
+''/ 0
type''1 5
.''5 6
Name''6 :
+''; <
$str''= I
,''I J
content''K R
,''R S
System''T Z
.''Z [
Text''[ _
.''_ `
Encoding''` h
.''h i
UTF8''i m
)''m n
;''n o
}(( 
})) 	
private++ 
string++ "
GenerateClassFilesType++ -
(++- .
Type++. 2
type++3 7
)++7 8
{,, 	
var-- 
projectName-- 
=-- 
Form1-- #
.--# $
frm--$ '
.--' (
txtProjectName--( 6
.--6 7
Text--7 ;
;--; <
return// 
fmtClassFile// 
.00 
Replace00 
(00 
$str00 &
,00& '
type00( ,
.00, -
Name00- 1
)001 2
.11 
Replace11 
(11 
$str11 -
,11- .
type11/ 3
.113 4
Name114 8
.118 9
	Substring119 B
(11B C
$num11C D
,11D E
$num11E F
)11F G
.11G H
ToLower11H O
(11O P
)11P Q
+11Q R
type11R V
.11V W
Name11W [
.11[ \
	Substring11\ e
(11e f
$num11f g
,11g h
type11h l
.11l m
Name11m q
.11q r
Length11r x
-11x y
$num11y z
)11z {
)11{ |
.22 
Replace22 
(22 
$str22 (
,22( )
projectName22* 5
)225 6
;226 7
}44 	
private88 
const88 
string88 
fmtClassFile88 )
=88* +
$str8J, 
;JJ 
}KK 
}LL Æ
EE:\src\NewGenSource\BayiPuan\FwGen\CreateDataAccessNhConcreteFiles.cs
	namespace 	
FwGen
 
{ 
public 

class +
CreateDataAccessNhConcreteFiles 0
{		 
List

 
<

 
Type

 
>

 
types

 
=

 
new

 
List

 #
<

# $
Type

$ (
>

( )
(

) *
)

* +
;

+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
} 	
private 
void 
GenerateClassFiles '
(' (
string( .
path/ 3
)3 4
{   	
foreach!! 
(!! 
var!! 
type!! 
in!!  
types!!! &
)!!& '
{"" 
var## 
content## 
=## "
GenerateClassFilesType## 4
(##4 5
type##5 9
)##9 :
;##: ;
if$$ 
($$ 
!$$ 
type$$ 
.$$ 
FullName$$ "
.$$" #
Contains$$# +
($$+ ,
$str$$, 9
)$$9 :
)$$: ;
File%% 
.%% 
WriteAllText%% %
(%%% &
path%%& *
+%%+ ,
$str%%, 0
+%%0 1
type%%2 6
.%%6 7
Name%%7 ;
+%%< =
$str%%> F
,%%F G
content%%H O
,%%O P
System%%Q W
.%%W X
Text%%X \
.%%\ ]
Encoding%%] e
.%%e f
UTF8%%f j
)%%j k
;%%k l
}&& 
}'' 	
private)) 
string)) "
GenerateClassFilesType)) -
())- .
Type)). 2
type))3 7
)))7 8
{** 	
var++ 
projectName++ 
=++ 
Form1++ #
.++# $
frm++$ '
.++' (
txtProjectName++( 6
.++6 7
Text++7 ;
;++; <
return-- 
fmtClassFile-- 
... 
Replace.. 
(.. 
$str.. &
,..& '
type..( ,
..., -
Name..- 1
)..1 2
.// 
Replace// 
(// 
$str// (
,//( )
projectName//* 5
)//5 6
;//6 7
}11 	
private55 
const55 
string55 
fmtClassFile55 )
=55* +
$str5D, 
;DD 
}EE 
}FF ßL
:E:\src\NewGenSource\BayiPuan\FwGen\CreateMVCUIListViews.cs
	namespace 	
FwGen
 
{ 
public 

class  
CreateMvcUiListViews %
{		 
List

 
<

 
Type

 
>

 
types

 
=

 
new

 
List

 #
<

# $
Type

$ (
>

( )
(

) *
)

* +
;

+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
} 	
private 
void 
GenerateClassFiles '
(' (
string( .
path/ 3
)3 4
{   	
foreach!! 
(!! 
var!! 
type!! 
in!!  
types!!! &
)!!& '
{"" 
var## 
content## 
=## "
GenerateClassFilesType## 4
(##4 5
type##5 9
)##9 :
;##: ;
if$$ 
($$ 
!$$ 
type$$ 
.$$ 
FullName$$ "
.$$" #
Contains$$# +
($$+ ,
$str$$, 9
)$$9 :
)$$: ;
File%% 
.%% 
WriteAllText%% %
(%%% &
path%%& *
+%%+ ,
type%%- 1
.%%1 2
Name%%2 6
+%%7 8
$str%%9 G
,%%G H
content%%I P
,%%P Q
System%%R X
.%%X Y
Text%%Y ]
.%%] ^
Encoding%%^ f
.%%f g
UTF8%%g k
)%%k l
;%%l m
}&& 
}'' 	
private)) 
string)) "
GenerateClassFilesType)) -
())- .
Type)). 2
type))3 7
)))7 8
{** 	
var++ 
projectName++ 
=++ 
Form1++ #
.++# $
frm++$ '
.++' (
txtProjectName++( 6
.++6 7
Text++7 ;
;++; <
var,, 
sb,, 
=,, 
new,, 
StringBuilder,, &
(,,& '
),,' (
;,,( )
var.. 
props.. 
=.. 
type.. 
... 
GetProperties.. *
(..* +
)..+ ,
;.., -
sb11 
.11 

AppendLine11 
(11 
$"11 
@model IGrid<11 )
{11) *
type11* .
.11. /
Name11/ 3
}113 4
>114 5
"115 6
)116 7
;117 8
sb22 
.22 

AppendLine22 
(22 
$str22 J
)22J K
;22K L
sb33 
.33 

AppendLine33 
(33 
$"33 
<style>33 #
"33# $
)33$ %
;33% &
sb44 
.44 

AppendLine44 
(44 
$str	44 Â
)
44Â Ã
;
44Ã Ä
sb55 
.55 

AppendLine55 
(55 
$"55 
border-top: 0;55 *
"55* +
)55+ ,
;55, -
sb66 
.66 

AppendLine66 
(66 
$"66  
background: #8bc34a;66 0
"660 1
)661 2
;662 3
sb77 
.77 

AppendLine77 
(77 
$str77 
)77 
;77 
sb88 
.88 

AppendLine88 
(88 
$str88 8
)888 9
;889 :
sb99 
.99 

AppendLine99 
(99 
$str	99 
)
99 
;
99 
sb:: 
.:: 

AppendLine:: 
(:: 
$":: 
padding-left: 5px;:: .
"::. /
)::/ 0
;::0 1
sb;; 
.;; 

AppendLine;; 
(;; 
$";; 
width: 100px;;; )
";;) *
);;* +
;;;+ ,
sb<< 
.<< 

AppendLine<< 
(<< 
$str<< 
)<< 
;<< 
sb== 
.== 

AppendLine== 
(== 
$"== 
</style>== $
"==$ %
)==% &
;==& '
sb>> 
.>> 

AppendLine>> 
(>> 
$">> g
[<div class=\"w3-container w3-card-4 w3-text-blue w3-margin \" style=\"background: white;\">>> w
">>w x
)>>x y
;>>y z
sb?? 
.?? 

AppendLine?? 
(?? 
$"?? :
.<div class=\"w3-container w3-blue w3-center\">?? J
"??J K
)??K L
;??L M
sb@@ 
.@@ 

AppendLine@@ 
(@@ 
$"@@ G
;<div align=\"left\" style=\"float: left;margin-top: 7px;\">@@ W
"@@W X
)@@X Y
;@@Y Z
sbAA 
.AA 

AppendLineAA 
(AA 
$"AA 
</div>AA "
"AA" #
)AA# $
;AA$ %
sbBB 
.BB 

AppendLineBB 
(BB 
$"BB "
<div align=\"center\">BB 2
"BB2 3
)BB3 4
;BB4 5
sbCC 
.CC 

AppendLineCC 
(CC 
$"CC 
<h4>CC  
{CC  !
typeCC! %
.CC% &
NameCC& *
}CC* +1
% TanÄ±mlarÄ±(@ViewBag.totalRows)</h4>CC+ N
"CCN O
)CCO P
;CCP Q
sbDD 
.DD 

AppendLineDD 
(DD 
$"DD 
</div>DD "
"DD" #
)DD# $
;DD$ %
sbEE 
.EE 

AppendLineEE 
(EE 
$"EE K
?<div align=\"right\" style=\"float: right;margin-top: -32px;\">EE [
"EE[ \
)EE\ ]
;EE] ^
sbFF 
.FF 

AppendLineFF 
(FF 
$"FF w
j    <a href=\"@(Url.Action(\"Create\"))\" title=\"Ekle\" class=\"fa fa-plus btn btn-primary btn-sm\"> </a>	FF 
"
FF 
)
FF 
;
FF 
sbGG 
.GG 

AppendLineGG 
(GG 
$"GG 
u    <a href=\"@(Url.Action(\"DF_BrandIndex\"))\" title=\"Tazele\" class=\"fas fa-sync-alt btn btn-info btn-sm\"> </a>	GG 
"
GG 
)
GG 
;
GG 
sbHH 
.HH 

AppendLineHH 
(HH 
$"HH «
    <a href=\"@(Url.Action(\"ExportIndex\") + \"?\" + Request.QueryString)\" title=\"Excele Aktar\" class=\"fa fa-file-excel-o btn btn-success btn-sm\"> </a>	HH ¹
"
HH¹ º
)
HHº »
;
HH» ¼
sbII 
.II 

AppendLineII 
(II 
$"II 
</div>II "
"II" #
)II# $
;II$ %
sbJJ 
.JJ 

AppendLineJJ 
(JJ 
$"JJ 
</div>JJ "
"JJ" #
)JJ# $
;JJ$ %
sbKK 
.KK 

AppendLineKK 
(KK 
$"KK )
<div class=\"w3-responsive\">KK 9
"KK9 :
)KK: ;
;KK; <
sbLL 
.LL 

AppendLineLL 
(LL 
$"LL 
@(new HtmlGrid<LL +
{LL+ ,
typeLL, 0
.LL0 1
NameLL1 5
}LL5 6!
>(Html, grid: Model))LL6 K
"LLK L
)LLL M
;LLM N
sbMM 
.MM 

AppendLineMM 
(MM 
$"MM 
</div>MM "
"MM" #
)MM# $
;MM$ %
sbNN 
.NN 

AppendLineNN 
(NN 
$"NN 
</div>NN "
"NN" #
)NN# $
;NN$ %
returnOO 
fmtClassFileOO 
.PP 
ReplacePP 
(PP 
$strPP &
,PP& '
typePP( ,
.PP, -
NamePP- 1
)PP1 2
.QQ 
ReplaceQQ 
(QQ 
$strQQ !
,QQ! "
sbQQ# %
.QQ% &
ToStringQQ& .
(QQ. /
)QQ/ 0
.QQ0 1
ReplaceQQ1 8
(QQ8 9
$strQQ9 @
,QQ@ A
$strQQB G
)QQG H
.RR 
ReplaceRR 
(RR 
$strRR $
,RR$ %
$strRR& +
)RR+ ,
)RR, -
;RR- .
}SS 	
constUU 
stringUU 
fmtClassFileUU !
=UU" #
$strUU$ -
;UU- .
}VV 
}WW ¹
+E:\src\NewGenSource\BayiPuan\FwGen\Form1.cs
	namespace		 	
FwGen		
 
{

 
public 

partial 
class 
Form1 
:  
Form! %
{ 
public 
static 
Form1 
frm 
;  
public 
Form1 
( 
) 
{ 	
frm 
= 
this 
; 
InitializeComponent 
(  
)  !
;! "
} 	
private 
void 
panel1_Paint !
(! "
object" (
sender) /
,/ 0
PaintEventArgs1 ?
e@ A
)A B
{ 	
} 	
private 
void 

Form1_Load 
(  
object  &
sender' -
,- .
	EventArgs/ 8
e9 :
): ;
{ 	
var 
	directory 
=  
VisualStudioProvider 0
.0 1'
TryGetSolutionDirectoryInfo1 L
(L M
)M N
;N O
string 
[ 
] 
dirs 
= 
	Directory %
.% &
GetDirectories& 4
(4 5
	directory5 >
.> ?
FullName? G
,G H
$strI U
,U V
SearchOptionW c
.c d
AllDirectoriesd r
)r s
;s t
txtProjectName 
. 
Text 
=  !
	directory" +
.+ ,
Name, 0
;0 1
textBox3   
.   
Text   
=   
	directory   %
.  % &
Name  & *
+  + ,
$str  - 6
;  6 7
foreach!! 
(!! 
string!! 
dir!! 
in!!  "
dirs!!# '
)!!' (
{"" 
textBox2## 
.## 
Text## 
=## 
dir##  #
+##$ %
$str##& 3
;##3 4
}$$ 
DirectoryInfo&& 

entityInfo&& $
=&&% &
new&&' *
DirectoryInfo&&+ 8
(&&8 9
textBox2&&9 A
.&&A B
Text&&B F
)&&F G
;&&G H
foreach'' 
('' 
var'' 
item'' 
in''  

entityInfo''! +
.''+ ,
GetFiles'', 4
(''4 5
)''5 6
)''6 7
{(( 
	comboBox1)) 
.)) 
Items)) 
.))  
Add))  #
())# $
item))$ (
.))( )
Name))) -
.))- .
Replace)). 5
())5 6
$str))6 ;
,)); <
$str))= ?
)))? @
)))@ A
;))A B
}** 
if,, 
(,, 
	directory,, 
!=,, 
null,, !
),,! "
{-- 
textBox1.. 
... 
Text.. 
=.. 
	directory..  )
...) *
FullName..* 2
;..2 3
}// 
}00 	
public22 
static22 
class22  
VisualStudioProvider22 0
{33 	
public44 
static44 
DirectoryInfo44 ''
TryGetSolutionDirectoryInfo44( C
(44C D
string44D J
currentPath44K V
=44W X
null44Y ]
)44] ^
{55 
var66 
	directory66 
=66 
new66  #
DirectoryInfo66$ 1
(661 2
currentPath77 
??77  "
	Directory77# ,
.77, -
GetCurrentDirectory77- @
(77@ A
)77A B
)77B C
;77C D
while88 
(88 
	directory88  
!=88! #
null88$ (
&&88) +
!88, -
	directory88- 6
.886 7
GetFiles887 ?
(88? @
$str88@ G
)88G H
.88H I
Any88I L
(88L M
)88M N
)88N O
{99 
	directory:: 
=:: 
	directory::  )
.::) *
Parent::* 0
;::0 1
};; 
return<< 
	directory<<  
;<<  !
}== 
}>> 	
public?? 
void?? )
CreateDataAccessAbstractFiles?? 1
(??1 2
)??2 3
{@@ 	
varRR 
pathRR 
=RR 
ApplicationRR "
.RR" #
StartupPathRR# .
+RR/ 0
$strRR1 I
;RRI J
ifSS 
(SS 
!SS 
pathSS 
.SS 
EndsWithSS 
(SS 
$strSS #
)SS# $
)SS$ %
pathSS& *
+=SS+ -
$strSS. 2
;SS2 3
ifTT 
(TT 
!TT 
	DirectoryTT 
.TT 
ExistsTT !
(TT! "
pathTT" &
)TT& '
)TT' (
	DirectoryUU 
.UU 
CreateDirectoryUU )
(UU) *
pathUU* .
)UU. /
;UU/ 0
varVV 
genVV 
=VV 
newVV )
CreateDataAccessAbstractFilesVV 7
(VV7 8
)VV8 9
;VV9 :
foreachWW 
(WW 
varWW 
typeWW 
inWW  
typeofWW! '
(WW' (
LanguageWW( 0
)WW0 1
.WW1 2
AssemblyWW2 :
.WW: ;
GetTypesWW; C
(WWC D
)WWD E
)WWE F
{XX 
varYY 
tYY 
=YY 
typeYY 
.YY 
GetInterfacesYY *
(YY* +
)YY+ ,
;YY, -
ifZZ 
(ZZ 
tZZ 
!=ZZ 
nullZZ 
&&ZZ  
tZZ! "
.ZZ" #
LengthZZ# )
>ZZ* +
$numZZ, -
&&ZZ. 0
tZZ1 2
[ZZ2 3
$numZZ3 4
]ZZ4 5
!=ZZ6 8
typeofZZ9 ?
(ZZ? @
IEntityZZ@ G
)ZZG H
)ZZH I
continueZZJ R
;ZZR S
gen[[ 
.[[ 
Add[[ 
([[ 
type[[ 
)[[ 
;[[ 
}\\ 
gen]] 
.]] 
Generate]] 
(]] 
path]] 
)]] 
;]] 
}^^ 	
public__ 
void__ '
CreateDataAccessContextFile__ /
(__/ 0
)__0 1
{`` 	
varaa 
pathaa 
=aa 
Applicationaa "
.aa" #
StartupPathaa# .
+aa/ 0
$straa1 Q
;aaQ R
ifbb 
(bb 
!bb 
pathbb 
.bb 
EndsWithbb 
(bb 
$strbb #
)bb# $
)bb$ %
pathbb& *
+=bb+ -
$strbb. 2
;bb2 3
ifcc 
(cc 
!cc 
	Directorycc 
.cc 
Existscc !
(cc! "
pathcc" &
)cc& '
)cc' (
	Directorydd 
.dd 
CreateDirectorydd )
(dd) *
pathdd* .
)dd. /
;dd/ 0
varee 

text2writeee 
=ee 
$stref 
+ff 
txtProjectNameff 
.ff 
Textff 
+ff 
$strfg 
+gg 	
txtProjectNamegg
 
.gg 
Textgg 
+gg 
$strgi  
+ii 
txtProjectNameii 
.ii 
Textii !
+ii" #
$strik$ 
+kk 
textBox3kk 
.kk 
Textkk "
+kk# $
$strkm% 
+mm 
textBox3mm 
.mm 
Textmm  
+mm! "
$strmo# (
+oo) *
textBox3oo+ 3
.oo3 4
Textoo4 8
+oo9 :
$strpp F
+ppG H
textBox3ppI Q
.ppQ R
TextppR V
+ppW X
$strpqY 

+qq 
Environmentqq 
.qq 
NewLineqq  
;qq  !
DirectoryInforr 

entityInforr $
=rr% &
newrr' *
DirectoryInforr+ 8
(rr8 9
textBox2rr9 A
.rrA B
TextrrB F
)rrF G
;rrG H
foreachss 
(ss 
varss 
itemss 
inss  

entityInfoss! +
.ss+ ,
GetFilesss, 4
(ss4 5
)ss5 6
)ss6 7
{tt 
varuu 
struu 
=uu 
itemuu 
.uu 
Nameuu #
.uu# $
Replaceuu$ +
(uu+ ,
$struu, 1
,uu1 2
$struu3 5
)uu5 6
;uu6 7
ifvv 
(vv 
strvv 
[vv 
strvv 
.vv 
Lengthvv "
-vv# $
$numvv% &
]vv& '
==vv( *
$charvv+ .
)vv. /
{ww 

text2writexx 
+=xx !
$strxx" 2
+xx3 4
strxx5 8
+xx9 :
$strxx; ?
+xx@ A
strxxB E
.xxE F
ReplacexxF M
(xxM N
$strxxN Q
,xxQ R
$strxxS X
)xxX Y
+xxZ [
$strxx\ l
+xxm n
Environmentxxo z
.xxz {
NewLine	xx{ 
;
xx 
}yy 
elsezz 
{{{ 

text2write|| 
+=|| !
$str||" 2
+||3 4
str||5 8
+||9 :
$str||; ?
+||@ A
str||B E
+||F G
$str||H K
+||L M
$str||N ^
+||_ `
Environment||a l
.||l m
NewLine||m t
;||t u
}}} 
} 

text2write
 
+=
 
$str
 

+
 
Environment
 
.
 
NewLine
  
;
  !
foreach
 
(
 
var
 
item
 
in
  

entityInfo
! +
.
+ ,
GetFiles
, 4
(
4 5
)
5 6
)
6 7
{
 
var
 
str
 
=
 
item
 
.
 
Name
 #
.
# $
Replace
$ +
(
+ ,
$str
, 1
,
1 2
$str
3 5
)
5 6
;
6 7

text2write
 
+=
 
$str
 D
+
E F
str
G J
+
K L
$str
M V
+
W X
Environment
Y d
.
d e
NewLine
e l
;
l m
}
 

text2write
 
+=
 
$str
 
;
 
File
 
.
 
WriteAllText
 
(
 
path
 "
+
# $
textBox3
% -
.
- .
Text
. 2
+
3 4
$str
5 :
,
: ;

text2write
< F
,
F G
System
H N
.
N O
Text
O S
.
S T
Encoding
T \
.
\ ]
UTF8
] a
)
a b
;
b c
}
 	
public
 
void
 4
&CreateDataAccessNhSqlServerHelperClass
 :
(
: ;
)
; <
{
 	
var
 
path
 
=
 
Application
 "
.
" #
StartupPath
# .
+
/ 0
$str
1 \
;
\ ]
if
 
(
 
!
 
path
 
.
 
EndsWith
 
(
 
$str
 #
)
# $
)
$ %
path
& *
+=
+ -
$str
. 2
;
2 3
if
 
(
 
!
 
	Directory
 
.
 
Exists
 !
(
! "
path
" &
)
& '
)
' (
	Directory
 
.
 
CreateDirectory
 )
(
) *
path
* .
)
. /
;
/ 0
var
 

text2write
 
=
 
$str
 
+
 
txtProjectName
 
.
 
Text
 !
+
" #
$str
¥$ F
+
¥¥G H
textBox3
¥¥I Q
.
¥¥Q R
Text
¥¥R V
+
¥¥W X
$str
¥­Y 
;
­­ 
File
®® 
.
®® 
WriteAllText
®® 
(
®® 
path
®® "
+
®®# $
$str
®®% 9
,
®®9 :

text2write
®®; E
,
®®E F
System
®®G M
.
®®M N
Text
®®N R
.
®®R S
Encoding
®®S [
.
®®[ \
UTF8
®®\ `
)
®®` a
;
®®a b
}
°° 	
public
±± 
void
±± 0
"CreateDataAccessNhibernateMapFiles
±± 6
(
±±6 7
)
±±7 8
{
²² 	
var
³³ 
path
³³ 
=
³³ 
Application
³³ "
.
³³" #
StartupPath
³³# .
+
³³/ 0
$str
³³1 ]
;
³³] ^
var
´´ 
gen
´´ 
=
´´ 
new
´´ '
HibernateMappingGenerator
´´ 3
(
´´3 4
)
´´4 5
;
´´5 6
foreach
µµ 
(
µµ 
var
µµ 
type
µµ 
in
µµ  
typeof
µµ! '
(
µµ' (
Language
µµ( 0
)
µµ0 1
.
µµ1 2
Assembly
µµ2 :
.
µµ: ;
GetTypes
µµ; C
(
µµC D
)
µµD E
)
µµE F
{
¶¶ 
var
·· 
t
·· 
=
·· 
type
·· 
.
·· 
GetInterfaces
·· *
(
··* +
)
··+ ,
;
··, -
if
¸¸ 
(
¸¸ 
t
¸¸ 
!=
¸¸ 
null
¸¸ 
&&
¸¸  
t
¸¸! "
.
¸¸" #
Length
¸¸# )
>
¸¸* +
$num
¸¸, -
&&
¸¸. 0
t
¸¸1 2
[
¸¸2 3
$num
¸¸3 4
]
¸¸4 5
!=
¸¸6 8
typeof
¸¸9 ?
(
¸¸? @
IEntity
¸¸@ G
)
¸¸G H
)
¸¸H I
continue
¸¸J R
;
¸¸R S
gen
¹¹ 
.
¹¹ 
Add
¹¹ 
(
¹¹ 
type
¹¹ 
)
¹¹ 
;
¹¹ 
}
ºº 
gen
¼¼ 
.
¼¼ 
Generate
¼¼ 
(
¼¼ 
path
¼¼ 
)
¼¼ 
;
¼¼ 
}
½½ 	
public
¾¾ 
void
¾¾ 5
'CreateDataAccessEntityFrameworkMapFiles
¾¾ ;
(
¾¾; <
)
¾¾< =
{
¿¿ 	
var
ÀÀ 
path
ÀÀ 
=
ÀÀ 
Application
ÀÀ "
.
ÀÀ" #
StartupPath
ÀÀ# .
+
ÀÀ/ 0
$str
ÀÀ1 b
;
ÀÀb c
var
ÁÁ 
gen
ÁÁ 
=
ÁÁ 
new
ÁÁ -
EntityFrameworkMappingGenerator
ÁÁ 9
(
ÁÁ9 :
)
ÁÁ: ;
;
ÁÁ; <
foreach
ÂÂ 
(
ÂÂ 
var
ÂÂ 
type
ÂÂ 
in
ÂÂ  
typeof
ÂÂ! '
(
ÂÂ' (
Language
ÂÂ( 0
)
ÂÂ0 1
.
ÂÂ1 2
Assembly
ÂÂ2 :
.
ÂÂ: ;
GetTypes
ÂÂ; C
(
ÂÂC D
)
ÂÂD E
)
ÂÂE F
{
ÃÃ 
var
ÄÄ 
t
ÄÄ 
=
ÄÄ 
type
ÄÄ 
.
ÄÄ 
GetInterfaces
ÄÄ *
(
ÄÄ* +
)
ÄÄ+ ,
;
ÄÄ, -
if
ÅÅ 
(
ÅÅ 
t
ÅÅ 
!=
ÅÅ 
null
ÅÅ 
&&
ÅÅ  
t
ÅÅ! "
.
ÅÅ" #
Length
ÅÅ# )
>
ÅÅ* +
$num
ÅÅ, -
&&
ÅÅ. 0
t
ÅÅ1 2
[
ÅÅ2 3
$num
ÅÅ3 4
]
ÅÅ4 5
!=
ÅÅ6 8
typeof
ÅÅ9 ?
(
ÅÅ? @
IEntity
ÅÅ@ G
)
ÅÅG H
)
ÅÅH I
continue
ÅÅJ R
;
ÅÅR S
gen
ÆÆ 
.
ÆÆ 
Add
ÆÆ 
(
ÆÆ 
type
ÆÆ 
)
ÆÆ 
;
ÆÆ 
}
ÇÇ 
gen
ÉÉ 
.
ÉÉ 
Generate
ÉÉ 
(
ÉÉ 
path
ÉÉ 
)
ÉÉ 
;
ÉÉ 
}
ÊÊ 	
public
ËË 
void
ËË -
CreateDataAccessNhConcreteFiles
ËË 3
(
ËË3 4
)
ËË4 5
{
ÌÌ 	
var
ÍÍ 
path
ÍÍ 
=
ÍÍ 
Application
ÍÍ "
.
ÍÍ" #
StartupPath
ÍÍ# .
+
ÍÍ/ 0
$str
ÍÍ1 T
;
ÍÍT U
var
ÎÎ 
gen
ÎÎ 
=
ÎÎ 
new
ÎÎ -
CreateDataAccessNhConcreteFiles
ÎÎ 9
(
ÎÎ9 :
)
ÎÎ: ;
;
ÎÎ; <
foreach
ÏÏ 
(
ÏÏ 
var
ÏÏ 
type
ÏÏ 
in
ÏÏ  
typeof
ÏÏ! '
(
ÏÏ' (
Language
ÏÏ( 0
)
ÏÏ0 1
.
ÏÏ1 2
Assembly
ÏÏ2 :
.
ÏÏ: ;
GetTypes
ÏÏ; C
(
ÏÏC D
)
ÏÏD E
)
ÏÏE F
{
ÐÐ 
var
ÑÑ 
t
ÑÑ 
=
ÑÑ 
type
ÑÑ 
.
ÑÑ 
GetInterfaces
ÑÑ *
(
ÑÑ* +
)
ÑÑ+ ,
;
ÑÑ, -
if
ÒÒ 
(
ÒÒ 
t
ÒÒ 
!=
ÒÒ 
null
ÒÒ 
&&
ÒÒ  
t
ÒÒ! "
.
ÒÒ" #
Length
ÒÒ# )
>
ÒÒ* +
$num
ÒÒ, -
&&
ÒÒ. 0
t
ÒÒ1 2
[
ÒÒ2 3
$num
ÒÒ3 4
]
ÒÒ4 5
!=
ÒÒ6 8
typeof
ÒÒ9 ?
(
ÒÒ? @
IEntity
ÒÒ@ G
)
ÒÒG H
)
ÒÒH I
continue
ÒÒJ R
;
ÒÒR S
gen
ÓÓ 
.
ÓÓ 
Add
ÓÓ 
(
ÓÓ 
type
ÓÓ 
)
ÓÓ 
;
ÓÓ 
}
ÔÔ 
gen
ÖÖ 
.
ÖÖ 
Generate
ÖÖ 
(
ÖÖ 
path
ÖÖ 
)
ÖÖ 
;
ÖÖ 
}
×× 	
public
ØØ 
void
ØØ -
CreateDataAccessEfConcreteFiles
ØØ 3
(
ØØ3 4
)
ØØ4 5
{
ÙÙ 	
var
ÚÚ 
path
ÚÚ 
=
ÚÚ 
Application
ÚÚ "
.
ÚÚ" #
StartupPath
ÚÚ# .
+
ÚÚ/ 0
$str
ÚÚ1 Y
;
ÚÚY Z
var
ÛÛ 
gen
ÛÛ 
=
ÛÛ 
new
ÛÛ -
CreateDataAccessEfConcreteFiles
ÛÛ 9
(
ÛÛ9 :
)
ÛÛ: ;
;
ÛÛ; <
foreach
ÜÜ 
(
ÜÜ 
var
ÜÜ 
type
ÜÜ 
in
ÜÜ  
typeof
ÜÜ! '
(
ÜÜ' (
Language
ÜÜ( 0
)
ÜÜ0 1
.
ÜÜ1 2
Assembly
ÜÜ2 :
.
ÜÜ: ;
GetTypes
ÜÜ; C
(
ÜÜC D
)
ÜÜD E
)
ÜÜE F
{
ÝÝ 
var
ÞÞ 
t
ÞÞ 
=
ÞÞ 
type
ÞÞ 
.
ÞÞ 
GetInterfaces
ÞÞ *
(
ÞÞ* +
)
ÞÞ+ ,
;
ÞÞ, -
if
ßß 
(
ßß 
t
ßß 
!=
ßß 
null
ßß 
&&
ßß  
t
ßß! "
.
ßß" #
Length
ßß# )
>
ßß* +
$num
ßß, -
&&
ßß. 0
t
ßß1 2
[
ßß2 3
$num
ßß3 4
]
ßß4 5
!=
ßß6 8
typeof
ßß9 ?
(
ßß? @
IEntity
ßß@ G
)
ßßG H
)
ßßH I
continue
ßßJ R
;
ßßR S
gen
àà 
.
àà 
Add
àà 
(
àà 
type
àà 
)
àà 
;
àà 
}
áá 
gen
ãã 
.
ãã 
Generate
ãã 
(
ãã 
path
ãã 
)
ãã 
;
ãã 
}
ää 	
public
åå 
void
åå )
CreateBusinessAbstractFiles
åå /
(
åå/ 0
)
åå0 1
{
ææ 	
var
çç 
path
çç 
=
çç 
Application
çç "
.
çç" #
StartupPath
çç# .
+
çç/ 0
$str
çç1 G
;
ççG H
var
èè 
gen
èè 
=
èè 
new
èè )
CreateBusinessAbstractFiles
èè 5
(
èè5 6
)
èè6 7
;
èè7 8
foreach
éé 
(
éé 
var
éé 
type
éé 
in
éé  
typeof
éé! '
(
éé' (
Language
éé( 0
)
éé0 1
.
éé1 2
Assembly
éé2 :
.
éé: ;
GetTypes
éé; C
(
ééC D
)
ééD E
)
ééE F
{
êê 
var
ëë 
t
ëë 
=
ëë 
type
ëë 
.
ëë 
GetInterfaces
ëë *
(
ëë* +
)
ëë+ ,
;
ëë, -
if
ìì 
(
ìì 
t
ìì 
!=
ìì 
null
ìì 
&&
ìì  
t
ìì! "
.
ìì" #
Length
ìì# )
>
ìì* +
$num
ìì, -
&&
ìì. 0
t
ìì1 2
[
ìì2 3
$num
ìì3 4
]
ìì4 5
!=
ìì6 8
typeof
ìì9 ?
(
ìì? @
IEntity
ìì@ G
)
ììG H
)
ììH I
continue
ììJ R
;
ììR S
gen
íí 
.
íí 
Add
íí 
(
íí 
type
íí 
)
íí 
;
íí 
}
îî 
gen
ðð 
.
ðð 
Generate
ðð 
(
ðð 
path
ðð 
)
ðð 
;
ðð 
}
ññ 	
public
òò 
void
òò (
CreateBusinessManagerFiles
òò .
(
òò. /
)
òò/ 0
{
óó 	
var
ôô 
path
ôô 
=
ôô 
Application
ôô "
.
ôô" #
StartupPath
ôô# .
+
ôô/ 0
$str
ôô1 P
;
ôôP Q
var
õõ 
gen
õõ 
=
õõ 
new
õõ (
CreateBusinessManagerFiles
õõ 4
(
õõ4 5
)
õõ5 6
;
õõ6 7
foreach
öö 
(
öö 
var
öö 
type
öö 
in
öö  
typeof
öö! '
(
öö' (
Language
öö( 0
)
öö0 1
.
öö1 2
Assembly
öö2 :
.
öö: ;
GetTypes
öö; C
(
ööC D
)
ööD E
)
ööE F
{
÷÷ 
var
øø 
t
øø 
=
øø 
type
øø 
.
øø 
GetInterfaces
øø *
(
øø* +
)
øø+ ,
;
øø, -
if
ùù 
(
ùù 
t
ùù 
!=
ùù 
null
ùù 
&&
ùù  
t
ùù! "
.
ùù" #
Length
ùù# )
>
ùù* +
$num
ùù, -
&&
ùù. 0
t
ùù1 2
[
ùù2 3
$num
ùù3 4
]
ùù4 5
!=
ùù6 8
typeof
ùù9 ?
(
ùù? @
IEntity
ùù@ G
)
ùùG H
)
ùùH I
continue
ùùJ R
;
ùùR S
gen
úú 
.
úú 
Add
úú 
(
úú 
type
úú 
)
úú 
;
úú 
}
ûû 
gen
ýý 
.
ýý 
Generate
ýý 
(
ýý 
path
ýý 
)
ýý 
;
ýý 
}
þþ 	
public
ÿÿ 
void
ÿÿ D
6CreateBusinessFluentValidationValidationRulesGenerator
ÿÿ J
(
ÿÿJ K
)
ÿÿK L
{
 	
var
 
path
 
=
 
Application
 "
.
" #
StartupPath
# .
+
/ 0
$str
1 _
;
_ `
var
 
gen
 
=
 
new
 D
6CreateBusinessFluentValidationValidationRulesGenerator
 P
(
P Q
)
Q R
;
R S
foreach
 
(
 
var
 
type
 
in
  
typeof
! '
(
' (
Language
( 0
)
0 1
.
1 2
Assembly
2 :
.
: ;
GetTypes
; C
(
C D
)
D E
)
E F
{
 
var
 
t
 
=
 
type
 
.
 
GetInterfaces
 *
(
* +
)
+ ,
;
, -
if
 
(
 
t
 
!=
 
null
 
&&
  
t
! "
.
" #
Length
# )
>
* +
$num
, -
&&
. 0
t
1 2
[
2 3
$num
3 4
]
4 5
!=
6 8
typeof
9 ?
(
? @
IEntity
@ G
)
G H
)
H I
continue
J R
;
R S
gen
 
.
 
Add
 
(
 
type
 
)
 
;
 
}
 
gen
 
.
 
Generate
 
(
 
path
 
)
 
;
 
}
 	
public
 
void
 9
+CreateBusinessMappingsAutoMapperProfileFile
 ?
(
? @
)
@ A
{
 	
var
 
path
 
=
 
Application
 "
.
" #
StartupPath
# .
+
/ 0
$str
1 [
;
[ \
if
 
(
 
!
 
path
 
.
 
EndsWith
 
(
 
$str
 #
)
# $
)
$ %
path
& *
+=
+ -
$str
. 2
;
2 3
if
 
(
 
!
 
	Directory
 
.
 
Exists
 !
(
! "
path
" &
)
& '
)
' (
	Directory
 
.
 
CreateDirectory
 )
(
) *
path
* .
)
. /
;
/ 0
var
 

text2write
 
=
 
$str
 
+
 	
txtProjectName

 
.
 
Text
 
+
 
$str
  
+
 
txtProjectName
 
.
 
Text
 !
+
" #
$str
$ 

+
 
Environment
 
.
 
NewLine
  
;
  !
DirectoryInfo
 

entityInfo
 $
=
% &
new
' *
DirectoryInfo
+ 8
(
8 9
textBox2
9 A
.
A B
Text
B F
)
F G
;
G H
foreach
 
(
 
var
 
item
 
in
  

entityInfo
! +
.
+ ,
GetFiles
, 4
(
4 5
)
5 6
)
6 7
{
 
var
 
str
 
=
 
item
 
.
 
Name
 #
.
# $
Replace
$ +
(
+ ,
$str
, 1
,
1 2
$str
3 5
)
5 6
;
6 7

text2write
 
+=
 
$str
 +
+
, -
str
. 1
+
2 3
$str
4 8
+
9 :
str
; >
+
? @
$str
A G
+
H I
Environment
J U
.
U V
NewLine
V ]
;
] ^
}
   

text2write
¡¡ 
+=
¡¡ 
$str
¡¥ 
;
¥¥ 
File
§§ 
.
§§ 
WriteAllText
§§ 
(
§§ 
path
§§ "
+
§§# $
$str
§§% :
,
§§: ;

text2write
§§< F
,
§§F G
System
§§H N
.
§§N O
Text
§§O S
.
§§S T
Encoding
§§T \
.
§§\ ]
UTF8
§§] a
)
§§a b
;
§§b c
}
¨¨ 	
public
©© 
void
©© &
CreateBusinessModuleFile
©© ,
(
©©, -
)
©©- .
{
ªª 	
var
«« 
path
«« 
=
«« 
Application
«« "
.
««" #
StartupPath
««# .
+
««/ 0
$str
««1 Z
;
««Z [
if
¬¬ 
(
¬¬ 
!
¬¬ 
path
¬¬ 
.
¬¬ 
EndsWith
¬¬ 
(
¬¬ 
$str
¬¬ #
)
¬¬# $
)
¬¬$ %
path
¬¬& *
+=
¬¬+ -
$str
¬¬. 2
;
¬¬2 3
if
­­ 
(
­­ 
!
­­ 
	Directory
­­ 
.
­­ 
Exists
­­ !
(
­­! "
path
­­" &
)
­­& '
)
­­' (
	Directory
®® 
.
®® 
CreateDirectory
®® )
(
®®) *
path
®®* .
)
®®. /
;
®®/ 0
var
¯¯ 

text2write
¯¯ 
=
¯¯ 
$str
¯° 
+
°° 	
txtProjectName
°°
 
.
°° 
Text
°° 
+
°° 
$str
°±  
+
±± 	
txtProjectName
±±
 
.
±± 
Text
±± 
+
±± 
$str
±²  
+
²² 	
txtProjectName
²²
 
.
²² 
Text
²² 
+
²² 
$str
²µ  
+
µµ 
txtProjectName
µµ 
.
µµ 
Text
µµ !
+
µµ" #
$str
µº$ 

+
ºº 
Environment
ºº 
.
ºº 
NewLine
ºº  
;
ºº  !
DirectoryInfo
»» 

entityInfo
»» $
=
»»% &
new
»»' *
DirectoryInfo
»»+ 8
(
»»8 9
textBox2
»»9 A
.
»»A B
Text
»»B F
)
»»F G
;
»»G H
foreach
¼¼ 
(
¼¼ 
var
¼¼ 
item
¼¼ 
in
¼¼  

entityInfo
¼¼! +
.
¼¼+ ,
GetFiles
¼¼, 4
(
¼¼4 5
)
¼¼5 6
)
¼¼6 7
{
½½ 
var
¾¾ 
str
¾¾ 
=
¾¾ 
item
¾¾ 
.
¾¾ 
Name
¾¾ #
.
¾¾# $
Replace
¾¾$ +
(
¾¾+ ,
$str
¾¾, 1
,
¾¾1 2
$str
¾¾3 5
)
¾¾5 6
;
¾¾6 7

text2write
ÁÁ 
+=
ÁÁ 
$str
ÁÁ '
+
ÁÁ( )
str
ÁÁ* -
+
ÁÁ. /
$str
ÁÁ0 @
+
ÁÁA B
str
ÁÁC F
+
ÁÁG H
$str
ÁÁI i
+
ÁÁj k
Environment
ÁÁl w
.
ÁÁw x
NewLine
ÁÁx 
+ÁÁ 
$str
ÂÂ 
+
ÂÂ 
str
ÂÂ 
+
ÂÂ 
$str
ÂÂ +
+
ÂÂ, -
str
ÂÂ. 1
+
ÂÂ2 3
$str
ÂÂ4 P
+
ÂÂQ R
Environment
ÂÂS ^
.
ÂÂ^ _
NewLine
ÂÂ_ f
+
ÂÂg h
Environment
ÂÂi t
.
ÂÂt u
NewLine
ÂÂu |
;
ÂÂ| }
}
ÃÃ 

text2write
ÄÄ 
+=
ÄÄ 
$str
ÄÆ  
+
ÆÆ! "
txtProjectName
ÆÆ# 1
.
ÆÆ1 2
Text
ÆÆ2 6
+
ÆÆ7 8
$str
ÆÊ9 
;
ÊÊ 
File
ÌÌ 
.
ÌÌ 
WriteAllText
ÌÌ 
(
ÌÌ 
path
ÌÌ "
+
ÌÌ# $
$str
ÌÌ% 8
,
ÌÌ8 9

text2write
ÌÌ: D
,
ÌÌD E
System
ÌÌF L
.
ÌÌL M
Text
ÌÌM Q
.
ÌÌQ R
Encoding
ÌÌR Z
.
ÌÌZ [
UTF8
ÌÌ[ _
)
ÌÌ_ `
;
ÌÌ` a
}
ÍÍ 	
public
ÎÎ 
void
ÎÎ (
CreateAutoMapperModuleFile
ÎÎ .
(
ÎÎ. /
)
ÎÎ/ 0
{
ÏÏ 	
var
ÐÐ 
path
ÐÐ 
=
ÐÐ 
Application
ÐÐ "
.
ÐÐ" #
StartupPath
ÐÐ# .
+
ÐÐ/ 0
$str
ÐÐ1 Z
;
ÐÐZ [
if
ÑÑ 
(
ÑÑ 
!
ÑÑ 
path
ÑÑ 
.
ÑÑ 
EndsWith
ÑÑ 
(
ÑÑ 
$str
ÑÑ #
)
ÑÑ# $
)
ÑÑ$ %
path
ÑÑ& *
+=
ÑÑ+ -
$str
ÑÑ. 2
;
ÑÑ2 3
if
ÒÒ 
(
ÒÒ 
!
ÒÒ 
	Directory
ÒÒ 
.
ÒÒ 
Exists
ÒÒ !
(
ÒÒ! "
path
ÒÒ" &
)
ÒÒ& '
)
ÒÒ' (
	Directory
ÓÓ 
.
ÓÓ 
CreateDirectory
ÓÓ )
(
ÓÓ) *
path
ÓÓ* .
)
ÓÓ. /
;
ÓÓ/ 0
var
ÔÔ 

text2write
ÔÔ 
=
ÔÔ 
$str
Ô× 
+
×× 
txtProjectName
×× 
.
×× 
Text
×× !
+
××" #
$str
×ê$ 
;
êê 
File
ìì 
.
ìì 
WriteAllText
ìì 
(
ìì 
path
ìì "
+
ìì# $
$str
ìì% :
,
ìì: ;

text2write
ìì< F
,
ììF G
System
ììH N
.
ììN O
Text
ììO S
.
ììS T
Encoding
ììT \
.
ìì\ ]
UTF8
ìì] a
)
ììa b
;
ììb c
}
íí 	
public
îî 
void
îî *
CreateDependencyResolverFile
îî 0
(
îî0 1
)
îî1 2
{
ïï 	
var
ðð 
path
ðð 
=
ðð 
Application
ðð "
.
ðð" #
StartupPath
ðð# .
+
ðð/ 0
$str
ðð1 Z
;
ððZ [
if
ññ 
(
ññ 
!
ññ 
path
ññ 
.
ññ 
EndsWith
ññ 
(
ññ 
$str
ññ #
)
ññ# $
)
ññ$ %
path
ññ& *
+=
ññ+ -
$str
ññ. 2
;
ññ2 3
if
òò 
(
òò 
!
òò 
	Directory
òò 
.
òò 
Exists
òò !
(
òò! "
path
òò" &
)
òò& '
)
òò' (
	Directory
óó 
.
óó 
CreateDirectory
óó )
(
óó) *
path
óó* .
)
óó. /
;
óó/ 0
var
ôô 

text2write
ôô 
=
ôô 
$str
ôö 
+
öö 
txtProjectName
öö 
.
öö 
Text
öö !
+
öö" #
$str
ö$ 
;
 
File
 
.
 
WriteAllText
 
(
 
path
 "
+
# $
$str
% <
,
< =

text2write
> H
,
H I
System
J P
.
P Q
Text
Q U
.
U V
Encoding
V ^
.
^ _
UTF8
_ c
)
c d
;
d e
}
 	
public
 
void
 '
CreateInstanceFactoryFile
 -
(
- .
)
. /
{
 	
var
 
path
 
=
 
Application
 "
.
" #
StartupPath
# .
+
/ 0
$str
1 Z
;
Z [
if
 
(
 
!
 
path
 
.
 
EndsWith
 
(
 
$str
 #
)
# $
)
$ %
path
& *
+=
+ -
$str
. 2
;
2 3
if
 
(
 
!
 
	Directory
 
.
 
Exists
 !
(
! "
path
" &
)
& '
)
' (
	Directory
 
.
 
CreateDirectory
 )
(
) *
path
* .
)
. /
;
/ 0
var
 

text2write
 
=
 
$str
 
+
 
txtProjectName
 
.
 
Text
 !
+
" #
$str
$ 
;
 
}
 	
public
 
void
 0
"CreateNinjectValidatoryFactoryFile
 6
(
6 7
)
7 8
{
 	
var
 
path
 
=
 
Application
 "
.
" #
StartupPath
# .
+
/ 0
$str
1 Z
;
Z [
if
   
(
   
!
   
path
   
.
   
EndsWith
   
(
   
$str
   #
)
  # $
)
  $ %
path
  & *
+=
  + -
$str
  . 2
;
  2 3
if
¡¡ 
(
¡¡ 
!
¡¡ 
	Directory
¡¡ 
.
¡¡ 
Exists
¡¡ !
(
¡¡! "
path
¡¡" &
)
¡¡& '
)
¡¡' (
	Directory
¢¢ 
.
¢¢ 
CreateDirectory
¢¢ )
(
¢¢) *
path
¢¢* .
)
¢¢. /
;
¢¢/ 0
var
££ 

text2write
££ 
=
££ 
$str
£§ 
+
§§ 
txtProjectName
§§ 
.
§§ 
Text
§§ !
+
§§" #
$str
§¿$ 
;
¿¿ 
}
ÁÁ 	
public
ÂÂ 
void
ÂÂ $
CreateValidationModule
ÂÂ *
(
ÂÂ* +
)
ÂÂ+ ,
{
ÃÃ 	
var
ÄÄ 
path
ÄÄ 
=
ÄÄ 
Application
ÄÄ "
.
ÄÄ" #
StartupPath
ÄÄ# .
+
ÄÄ/ 0
$str
ÄÄ1 Z
;
ÄÄZ [
if
ÅÅ 
(
ÅÅ 
!
ÅÅ 
path
ÅÅ 
.
ÅÅ 
EndsWith
ÅÅ 
(
ÅÅ 
$str
ÅÅ #
)
ÅÅ# $
)
ÅÅ$ %
path
ÅÅ& *
+=
ÅÅ+ -
$str
ÅÅ. 2
;
ÅÅ2 3
if
ÆÆ 
(
ÆÆ 
!
ÆÆ 
	Directory
ÆÆ 
.
ÆÆ 
Exists
ÆÆ !
(
ÆÆ! "
path
ÆÆ" &
)
ÆÆ& '
)
ÆÆ' (
	Directory
ÇÇ 
.
ÇÇ 
CreateDirectory
ÇÇ )
(
ÇÇ) *
path
ÇÇ* .
)
ÇÇ. /
;
ÇÇ/ 0
var
ÈÈ 

text2write
ÈÈ 
=
ÈÈ 
$str
ÈÉ 
+
ÉÉ 	
txtProjectName
ÉÉ
 
.
ÉÉ 
Text
ÉÉ 
+
ÉÉ 
$str
ÉÊ  
+
ÊÊ 	
txtProjectName
ÊÊ
 
.
ÊÊ 
Text
ÊÊ 
+
ÊÊ 
$str
ÊÍ  
+
ÍÍ 
txtProjectName
ÍÍ 
.
ÍÍ 
Text
ÍÍ !
+
ÍÍ" #
$str
ÍÒ$ 

+
ÒÒ 
Environment
ÒÒ 
.
ÒÒ 
NewLine
ÒÒ  
;
ÒÒ  !
DirectoryInfo
ÓÓ 

entityInfo
ÓÓ $
=
ÓÓ% &
new
ÓÓ' *
DirectoryInfo
ÓÓ+ 8
(
ÓÓ8 9
textBox2
ÓÓ9 A
.
ÓÓA B
Text
ÓÓB F
)
ÓÓF G
;
ÓÓG H
foreach
ÔÔ 
(
ÔÔ 
var
ÔÔ 
item
ÔÔ 
in
ÔÔ  

entityInfo
ÔÔ! +
.
ÔÔ+ ,
GetFiles
ÔÔ, 4
(
ÔÔ4 5
)
ÔÔ5 6
)
ÔÔ6 7
{
ÕÕ 
var
ÖÖ 
str
ÖÖ 
=
ÖÖ 
item
ÖÖ 
.
ÖÖ 
Name
ÖÖ #
.
ÖÖ# $
Replace
ÖÖ$ +
(
ÖÖ+ ,
$str
ÖÖ, 1
,
ÖÖ1 2
$str
ÖÖ3 5
)
ÖÖ5 6
;
ÖÖ6 7

text2write
ÙÙ 
+=
ÙÙ 
$str
ÙÙ 1
+
ÙÙ2 3
str
ÙÙ4 7
+
ÙÙ8 9
$str
ÙÙ: D
+
ÙÙE F
str
ÙÙG J
+
ÙÙK L
$str
ÙÙM o
+
ÙÙp q
Environment
ÚÚ )
.
ÚÚ) *
NewLine
ÚÚ* 1
;
ÚÚ1 2
}
ÜÜ 

text2write
ÝÝ 
+=
ÝÝ 
$str
Ýá 
;
áá 
File
ãã 
.
ãã 
WriteAllText
ãã 
(
ãã 
path
ãã "
+
ãã# $
$str
ãã% :
,
ãã: ;

text2write
ãã< F
,
ããF G
System
ããH N
.
ããN O
Text
ããO S
.
ããS T
Encoding
ããT \
.
ãã\ ]
UTF8
ãã] a
)
ããa b
;
ããb c
}
ää 	
public
åå 
void
åå !
CreateServiceModule
åå '
(
åå' (
)
åå( )
{
ææ 	
var
çç 
path
çç 
=
çç 
Application
çç "
.
çç" #
StartupPath
çç# .
+
çç/ 0
$str
çç1 Z
;
ççZ [
if
èè 
(
èè 
!
èè 
path
èè 
.
èè 
EndsWith
èè 
(
èè 
$str
èè #
)
èè# $
)
èè$ %
path
èè& *
+=
èè+ -
$str
èè. 2
;
èè2 3
if
éé 
(
éé 
!
éé 
	Directory
éé 
.
éé 
Exists
éé !
(
éé! "
path
éé" &
)
éé& '
)
éé' (
	Directory
êê 
.
êê 
CreateDirectory
êê )
(
êê) *
path
êê* .
)
êê. /
;
êê/ 0
var
ëë 

text2write
ëë 
=
ëë 
$str
ëë &
+
ëë' (
txtProjectName
ëë) 7
.
ëë7 8
Text
ëë8 <
+
ëë= >
$str
ëï? 
+
ïï 
txtProjectName
ïï 
.
ïï 
Text
ïï !
+
ïï" #
$str
ïô$ 

+
ôô 
Environment
ôô 
.
ôô 
NewLine
ôô  
;
ôô  !
DirectoryInfo
õõ 

entityInfo
õõ $
=
õõ% &
new
õõ' *
DirectoryInfo
õõ+ 8
(
õõ8 9
textBox2
õõ9 A
.
õõA B
Text
õõB F
)
õõF G
;
õõG H
foreach
öö 
(
öö 
var
öö 
item
öö 
in
öö  

entityInfo
öö! +
.
öö+ ,
GetFiles
öö, 4
(
öö4 5
)
öö5 6
)
öö6 7
{
÷÷ 
var
øø 
str
øø 
=
øø 
item
øø 
.
øø 
Name
øø #
.
øø# $
Replace
øø$ +
(
øø+ ,
$str
øø, 1
,
øø1 2
$str
øø3 5
)
øø5 6
;
øø6 7

text2write
ûû 
+=
ûû 
$str
ûû '
+
ûû( )
str
ûû* -
+
ûû. /
$str
ûû0 Q
+
ûûR S
str
ûûT W
+
ûûX Y
$str
ûûZ v
+
ûûw x
Environment
üü )
.
üü) *
NewLine
üü* 1
;
üü1 2
}
þþ 

text2write
ÿÿ 
+=
ÿÿ 
$str
ÿ 
;
 
File
 
.
 
WriteAllText
 
(
 
path
 "
+
# $
$str
% 7
,
7 8

text2write
9 C
,
C D
System
E K
.
K L
Text
L P
.
P Q
Encoding
Q Y
.
Y Z
UTF8
Z ^
)
^ _
;
_ `
}
 	
public
 
void
 %
CreateResolveModuleFile
 +
(
+ ,
)
, -
{
 	
var
 
path
 
=
 
Application
 "
.
" #
StartupPath
# .
+
/ 0
$str
1 Z
;
Z [
if
 
(
 
!
 
path
 
.
 
EndsWith
 
(
 
$str
 #
)
# $
)
$ %
path
& *
+=
+ -
$str
. 2
;
2 3
if
 
(
 
!
 
	Directory
 
.
 
Exists
 !
(
! "
path
" &
)
& '
)
' (
	Directory
 
.
 
CreateDirectory
 )
(
) *
path
* .
)
. /
;
/ 0
var
 

text2write
 
=
 
$str
 
+
 
txtProjectName
 
.
 
Text
 !
+
" #
$str
¦$ 
;
¦¦ 
File
¨¨ 
.
¨¨ 
WriteAllText
¨¨ 
(
¨¨ 
path
¨¨ "
+
¨¨# $
$str
¨¨% 7
,
¨¨7 8

text2write
¨¨9 C
,
¨¨C D
System
¨¨E K
.
¨¨K L
Text
¨¨L P
.
¨¨P Q
Encoding
¨¨Q Y
.
¨¨Y Z
UTF8
¨¨Z ^
)
¨¨^ _
;
¨¨_ `
}
©© 	
private
ªª 
void
ªª $
CreateMVCListViewModel
ªª +
(
ªª+ ,
)
ªª, -
{
«« 	
var
¬¬ 
path
¬¬ 
=
¬¬ 
Application
¬¬ "
.
¬¬" #
StartupPath
¬¬# .
+
¬¬/ 0
$str
¬¬1 P
;
¬¬P Q
var
­­ 
gen
­­ 
=
­­ 
new
­­ $
CreateMvcListViewModel
­­ 0
(
­­0 1
)
­­1 2
;
­­2 3
foreach
®® 
(
®® 
var
®® 
type
®® 
in
®®  
typeof
®®! '
(
®®' (
Language
®®( 0
)
®®0 1
.
®®1 2
Assembly
®®2 :
.
®®: ;
GetTypes
®®; C
(
®®C D
)
®®D E
)
®®E F
{
¯¯ 
var
°° 
t
°° 
=
°° 
type
°° 
.
°° 
GetInterfaces
°° *
(
°°* +
)
°°+ ,
;
°°, -
if
±± 
(
±± 
t
±± 
!=
±± 
null
±± 
&&
±±  
t
±±! "
.
±±" #
Length
±±# )
>
±±* +
$num
±±, -
&&
±±. 0
t
±±1 2
[
±±2 3
$num
±±3 4
]
±±4 5
!=
±±6 8
typeof
±±9 ?
(
±±? @
IEntity
±±@ G
)
±±G H
)
±±H I
continue
±±J R
;
±±R S
gen
²² 
.
²² 
Add
²² 
(
²² 
type
²² 
)
²² 
;
²² 
}
³³ 
gen
µµ 
.
µµ 
Generate
µµ 
(
µµ 
path
µµ 
)
µµ 
;
µµ 
}
¶¶ 	
private
·· 
void
··  
CreateMVCViewModel
·· '
(
··' (
)
··( )
{
¸¸ 	
var
¹¹ 
path
¹¹ 
=
¹¹ 
Application
¹¹ "
.
¹¹" #
StartupPath
¹¹# .
+
¹¹/ 0
$str
¹¹1 L
;
¹¹L M
var
ºº 
gen
ºº 
=
ºº 
new
ºº  
CreateMvcViewModel
ºº ,
(
ºº, -
)
ºº- .
;
ºº. /
foreach
»» 
(
»» 
var
»» 
type
»» 
in
»»  
typeof
»»! '
(
»»' (
Language
»»( 0
)
»»0 1
.
»»1 2
Assembly
»»2 :
.
»»: ;
GetTypes
»»; C
(
»»C D
)
»»D E
)
»»E F
{
¼¼ 
var
½½ 
t
½½ 
=
½½ 
type
½½ 
.
½½ 
GetInterfaces
½½ *
(
½½* +
)
½½+ ,
;
½½, -
if
¾¾ 
(
¾¾ 
t
¾¾ 
!=
¾¾ 
null
¾¾ 
&&
¾¾  
t
¾¾! "
.
¾¾" #
Length
¾¾# )
>
¾¾* +
$num
¾¾, -
&&
¾¾. 0
t
¾¾1 2
[
¾¾2 3
$num
¾¾3 4
]
¾¾4 5
!=
¾¾6 8
typeof
¾¾9 ?
(
¾¾? @
IEntity
¾¾@ G
)
¾¾G H
)
¾¾H I
continue
¾¾J R
;
¾¾R S
gen
¿¿ 
.
¿¿ 
Add
¿¿ 
(
¿¿ 
type
¿¿ 
)
¿¿ 
;
¿¿ 
}
ÀÀ 
gen
ÂÂ 
.
ÂÂ 
Generate
ÂÂ 
(
ÂÂ 
path
ÂÂ 
)
ÂÂ 
;
ÂÂ 
}
ÃÃ 	
private
ÄÄ 
void
ÄÄ 
CreateController
ÄÄ %
(
ÄÄ% &
)
ÄÄ& '
{
ÅÅ 	
var
ÆÆ 
path
ÆÆ 
=
ÆÆ 
Application
ÆÆ "
.
ÆÆ" #
StartupPath
ÆÆ# .
+
ÆÆ/ 0
$str
ÆÆ1 F
;
ÆÆF G
var
ÇÇ 
gen
ÇÇ 
=
ÇÇ 
new
ÇÇ 
CreateController
ÇÇ *
(
ÇÇ* +
)
ÇÇ+ ,
;
ÇÇ, -
foreach
ÈÈ 
(
ÈÈ 
var
ÈÈ 
type
ÈÈ 
in
ÈÈ  
typeof
ÈÈ! '
(
ÈÈ' (
Language
ÈÈ( 0
)
ÈÈ0 1
.
ÈÈ1 2
Assembly
ÈÈ2 :
.
ÈÈ: ;
GetTypes
ÈÈ; C
(
ÈÈC D
)
ÈÈD E
)
ÈÈE F
{
ÉÉ 
var
ÊÊ 
t
ÊÊ 
=
ÊÊ 
type
ÊÊ 
.
ÊÊ 
GetInterfaces
ÊÊ *
(
ÊÊ* +
)
ÊÊ+ ,
;
ÊÊ, -
if
ËË 
(
ËË 
t
ËË 
!=
ËË 
null
ËË 
&&
ËË  
t
ËË! "
.
ËË" #
Length
ËË# )
>
ËË* +
$num
ËË, -
&&
ËË. 0
t
ËË1 2
[
ËË2 3
$num
ËË3 4
]
ËË4 5
!=
ËË6 8
typeof
ËË9 ?
(
ËË? @
IEntity
ËË@ G
)
ËËG H
)
ËËH I
continue
ËËJ R
;
ËËR S
gen
ÌÌ 
.
ÌÌ 
Add
ÌÌ 
(
ÌÌ 
type
ÌÌ 
)
ÌÌ 
;
ÌÌ 
}
ÍÍ 
gen
ÏÏ 
.
ÏÏ 
Generate
ÏÏ 
(
ÏÏ 
path
ÏÏ 
)
ÏÏ 
;
ÏÏ 
}
ÐÐ 	
private
ÒÒ 
void
ÒÒ "
CreateMvcUiListViews
ÒÒ )
(
ÒÒ) *
)
ÒÒ* +
{
ÓÓ 	
var
ÔÔ 
path
ÔÔ 
=
ÔÔ 
Application
ÔÔ "
.
ÔÔ" #
StartupPath
ÔÔ# .
+
ÔÔ/ 0
$str
ÔÔ1 @
;
ÔÔ@ A
var
ÕÕ 
gen
ÕÕ 
=
ÕÕ 
new
ÕÕ "
CreateMvcUiListViews
ÕÕ .
(
ÕÕ. /
)
ÕÕ/ 0
;
ÕÕ0 1
var
ÖÖ 
typess
ÖÖ 
=
ÖÖ 
typeof
ÖÖ 
(
ÖÖ  
Language
ÖÖ  (
)
ÖÖ( )
.
ÖÖ) *
Assembly
ÖÖ* 2
.
ÖÖ2 3
GetTypes
ÖÖ3 ;
(
ÖÖ; <
)
ÖÖ< =
;
ÖÖ= >
foreach
×× 
(
×× 
var
×× 
type
×× 
in
××  
typess
××! '
)
××' (
{
ØØ 
var
ÙÙ 
t
ÙÙ 
=
ÙÙ 
type
ÙÙ 
.
ÙÙ 
GetInterfaces
ÙÙ *
(
ÙÙ* +
)
ÙÙ+ ,
;
ÙÙ, -
if
ÚÚ 
(
ÚÚ 
t
ÚÚ 
!=
ÚÚ 
null
ÚÚ 
&&
ÚÚ  
t
ÚÚ! "
.
ÚÚ" #
Length
ÚÚ# )
>
ÚÚ* +
$num
ÚÚ, -
&&
ÚÚ. 0
t
ÚÚ1 2
[
ÚÚ2 3
$num
ÚÚ3 4
]
ÚÚ4 5
!=
ÚÚ6 8
typeof
ÚÚ9 ?
(
ÚÚ? @
IEntity
ÚÚ@ G
)
ÚÚG H
)
ÚÚH I
continue
ÚÚJ R
;
ÚÚR S
gen
ÛÛ 
.
ÛÛ 
Add
ÛÛ 
(
ÛÛ 
type
ÛÛ 
)
ÛÛ 
;
ÛÛ 
}
ÜÜ 
gen
ÞÞ 
.
ÞÞ 
Generate
ÞÞ 
(
ÞÞ 
path
ÞÞ 
)
ÞÞ 
;
ÞÞ 
}
ßß 	
private
áá 
void
áá  
CreatePageInfoFile
áá '
(
áá' (
)
áá( )
{
ââ 	
var
ãã 
path
ãã 
=
ãã 
Application
ãã "
.
ãã" #
StartupPath
ãã# .
+
ãã/ 0
$str
ãã1 B
;
ããB C
if
ää 
(
ää 
!
ää 
path
ää 
.
ää 
EndsWith
ää 
(
ää 
$str
ää #
)
ää# $
)
ää$ %
path
ää& *
+=
ää+ -
$str
ää. 2
;
ää2 3
if
åå 
(
åå 
!
åå 
	Directory
åå 
.
åå 
Exists
åå !
(
åå! "
path
åå" &
)
åå& '
)
åå' (
	Directory
ææ 
.
ææ 
CreateDirectory
ææ )
(
ææ) *
path
ææ* .
)
ææ. /
;
ææ/ 0
var
çç 

text2write
çç 
=
çç 
$str
çç *
+
çç+ ,
txtProjectName
çç- ;
.
çç; <
Text
çç< @
+
ççA B
$str
çðC 
;
ðð 
File
òò 
.
òò 
WriteAllText
òò 
(
òò 
path
òò "
+
òò# $
$str
òò% 2
,
òò2 3

text2write
òò4 >
,
òò> ?
System
òò@ F
.
òòF G
Text
òòG K
.
òòK L
Encoding
òòL T
.
òòT U
UTF8
òòU Y
)
òòY Z
;
òòZ [
}
óó 	
private
ôô 
void
ôô 
button1_Click
ôô "
(
ôô" #
object
ôô# )
sender
ôô* 0
,
ôô0 1
	EventArgs
ôô2 ;
e
ôô< =
)
ôô= >
{
õõ 	
if
öö 
(
öö 
chkNh
öö 
.
öö 
Checked
öö 
)
öö 
{
÷÷ 0
"CreateDataAccessNhibernateMapFiles
ùù 2
(
ùù2 3
)
ùù3 4
;
ùù4 5-
CreateDataAccessNhConcreteFiles
úú /
(
úú/ 0
)
úú0 1
;
úú1 24
&CreateDataAccessNhSqlServerHelperClass
ûû 6
(
ûû6 7
)
ûû7 8
;
ûû8 9
}
üü 
else
ýý 
if
ýý 
(
ýý 
chkEf
ýý 
.
ýý 
Checked
ýý "
)
ýý" #
{
þþ -
CreateDataAccessEfConcreteFiles
 /
(
/ 0
)
0 1
;
1 25
'CreateDataAccessEntityFrameworkMapFiles
 7
(
7 8
)
8 9
;
9 :
}
 
else
 
{
 

MessageBox
 
.
 
Show
 
(
  
$str
  J
)
J K
;
K L
return
 
;
 
}
 +
CreateDataAccessAbstractFiles
 )
(
) *
)
* +
;
+ ,)
CreateDataAccessContextFile
 '
(
' (
)
( )
;
) *)
CreateBusinessAbstractFiles
 '
(
' (
)
( )
;
) *(
CreateBusinessManagerFiles
 &
(
& '
)
' (
;
( )D
6CreateBusinessFluentValidationValidationRulesGenerator
 B
(
B C
)
C D
;
D E9
+CreateBusinessMappingsAutoMapperProfileFile
 7
(
7 8
)
8 9
;
9 :&
CreateBusinessModuleFile
 $
(
$ %
)
% &
;
& '(
CreateAutoMapperModuleFile
 &
(
& '
)
' (
;
( )*
CreateDependencyResolverFile
 (
(
( )
)
) *
;
* +'
CreateInstanceFactoryFile
 %
(
% &
)
& '
;
' (0
"CreateNinjectValidatoryFactoryFile
 .
(
. /
)
/ 0
;
0 1%
CreateResolveModuleFile
 #
(
# $
)
$ %
;
% &$
CreateValidationModule
 "
(
" #
)
# $
;
$ %!
CreateServiceModule
 
(
  
)
  !
;
! "$
CreateMVCListViewModel
 "
(
" #
)
# $
;
$ % 
CreatePageInfoFile
 
(
 
)
  
;
  ! 
CreateMVCViewModel
 
(
 
)
  
;
  !"
CreateMvcUiListViews
  
(
  !
)
! "
;
" #
CreateController
 
(
 
)
 
;
 

MessageBox
 
.
 
Show
 
(
 
$str
 e
)
e f
;
f g
string
 
myPath
 
=
 
Application
 '
.
' (
StartupPath
( 3
;
3 4
System
 
.
 
Diagnostics
 
.
 
Process
 &
prc
' *
=
+ ,
new
- 0
System
1 7
.
7 8
Diagnostics
8 C
.
C D
Process
D K
(
K L
)
L M
;
M N
prc
 
.
 
	StartInfo
 
.
 
FileName
 "
=
# $
myPath
% +
;
+ ,
prc
   
.
   
Start
   
(
   
)
   
;
   
}
¡¡ 	
}
¤¤ 
}¥¥ Â
CE:\src\NewGenSource\BayiPuan\FwGen\CreateDataAccessAbstractFiles.cs
	namespace 	
FwGen
 
{ 
public 

class )
CreateDataAccessAbstractFiles .
{		 
List

 
<

 
Type

 
>

 
types

 
=

 
new

 
List

 #
<

# $
Type

$ (
>

( )
(

) *
)

* +
;

+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
} 	
private 
void 
GenerateClassFiles '
(' (
string( .
path/ 3
)3 4
{   	
foreach!! 
(!! 
var!! 
type!! 
in!!  
types!!! &
)!!& '
{"" 
var## 
content## 
=## "
GenerateClassFilesType## 4
(##4 5
type##5 9
)##9 :
;##: ;
if$$ 
($$ 
!$$ 
type$$ 
.$$ 
FullName$$ "
.$$" #
Contains$$# +
($$+ ,
$str$$, 9
)$$9 :
)$$: ;
File%% 
.%% 
WriteAllText%% %
(%%% &
path%%& *
+%%+ ,
$str%%, /
+%%/ 0
type%%1 5
.%%5 6
Name%%6 :
+%%; <
$str%%= E
,%%E F
content%%G N
,%%N O
System%%P V
.%%V W
Text%%W [
.%%[ \
Encoding%%\ d
.%%d e
UTF8%%e i
)%%i j
;%%j k
}&& 
}'' 	
private)) 
string)) "
GenerateClassFilesType)) -
())- .
Type)). 2
type))3 7
)))7 8
{** 	
var++ 
projectName++ 
=++ 
Form1++ #
.++# $
frm++$ '
.++' (
txtProjectName++( 6
.++6 7
Text++7 ;
;++; <
return-- 
fmtClassFile-- 
... 
Replace.. 
(.. 
$str.. &
,..& '
type..( ,
..., -
Name..- 1
)..1 2
.// 
Replace// 
(// 
$str// (
,//( )
projectName//* 5
)//5 6
;//6 7
}11 	
private55 
const55 
string55 
fmtClassFile55 )
=55* +
$str5A, 
;AA 
}BB 
}CC ®*
\E:\src\NewGenSource\BayiPuan\FwGen\CreateBusinessFluentValidationValidationRulesGenerator.cs
	namespace 	
FwGen
 
{ 
public 

class B
6CreateBusinessFluentValidationValidationRulesGenerator G
{		 
List

 
<

 
Type

 
>

 
types

 
=

 
new

 
List

 #
<

# $
Type

$ (
>

( )
(

) *
)

* +
;

+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
} 	
private 
void 
GenerateClassFiles '
(' (
string( .
path/ 3
)3 4
{   	
foreach!! 
(!! 
var!! 
type!! 
in!!  
types!!! &
)!!& '
{"" 
var## 
content## 
=## "
GenerateClassFilesType## 4
(##4 5
type##5 9
)##9 :
;##: ;
if$$ 
($$ 
!$$ 
type$$ 
.$$ 
FullName$$ "
.$$" #
Contains$$# +
($$+ ,
$str$$, 9
)$$9 :
)$$: ;
File%% 
.%% 
WriteAllText%% %
(%%% &
path%%& *
+%%+ ,
type%%- 1
.%%1 2
Name%%2 6
+%%7 8
$str%%9 G
,%%G H
content%%I P
,%%P Q
System%%R X
.%%X Y
Text%%Y ]
.%%] ^
Encoding%%^ f
.%%f g
UTF8%%g k
)%%k l
;%%l m
}&& 
}'' 	
private)) 
string)) "
GenerateClassFilesType)) -
())- .
Type)). 2
type))3 7
)))7 8
{** 	
var++ 
sb++ 
=++ 
new++ 
StringBuilder++ &
(++& '
)++' (
;++( )
var-- 
props-- 
=-- 
type-- 
.-- 
GetProperties-- *
(--* +
)--+ ,
;--, -
foreach// 
(// 
var// 
prop// 
in//  
props//! &
)//& '
{00 
sb22 
.22 

AppendLine22 
(22 
$"22  
RuleFor(x => x.22  /
{22/ 0
prop220 4
.224 5
Name225 9
}229 :
).NotEmpty();22: G
"22G H
)22H I
;22I J
}33 
var44 
projectName44 
=44 
Form144 #
.44# $
frm44$ '
.44' (
txtProjectName44( 6
.446 7
Text447 ;
;44; <
return55 
fmtClassFile55 
.66 
Replace66 
(66 
$str66 &
,66& '
type66( ,
.66, -
Name66- 1
)661 2
.77 
Replace77 
(77 
$str77 -
,77- .
type77/ 3
.773 4
Name774 8
.778 9
	Substring779 B
(77B C
$num77C D
,77D E
$num77F G
)77G H
.77H I
ToLower77I P
(77P Q
)77Q R
+77S T
type77U Y
.77Y Z
Name77Z ^
.77^ _
	Substring77_ h
(77h i
$num77i j
,77j k
type77l p
.77p q
Name77q u
.77u v
Length77v |
-77} ~
$num	77 
)
77 
)
77 
.88 
Replace88 
(88 
$str88 (
,88( )
projectName88* 5
)885 6
.99 
Replace99 
(99 
$str99 !
,99! "
sb99# %
.99% &
ToString99& .
(99. /
)99/ 0
)990 1
;991 2
}:: 	
const== 
string== 
fmtClassFile== !
===" #
$str=Z$ 
;ZZ 
}[[ 
}\\ m
8E:\src\NewGenSource\BayiPuan\FwGen\CreateMVCViewModel.cs
	namespace 	
FwGen
 
{		 
public

 

class

 
CreateMvcViewModel

 #
{ 
List 
< 
Type 
> 
types 
= 
new 
List #
<# $
Type$ (
>( )
() *
)* +
;+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
} 	
private!! 
void!! 
GenerateClassFiles!! '
(!!' (
string!!( .
path!!/ 3
)!!3 4
{"" 	
foreach## 
(## 
var## 
type## 
in##  
types##! &
)##& '
{$$ 
var%% 
content%% 
=%% "
GenerateClassFilesType%% 4
(%%4 5
type%%5 9
)%%9 :
;%%: ;
if&& 
(&& 
!&& 
type&& 
.&& 
FullName&& "
.&&" #
Contains&&# +
(&&+ ,
$str&&, 9
)&&9 :
)&&: ;
File'' 
.'' 
WriteAllText'' %
(''% &
path''& *
+''+ ,
type''- 1
.''1 2
Name''2 6
+''7 8
$str''9 G
,''G H
content''I P
,''P Q
System''R X
.''X Y
Text''Y ]
.''] ^
Encoding''^ f
.''f g
UTF8''g k
)''k l
;''l m
}(( 
})) 	
private++ 
string++ "
GenerateClassFilesType++ -
(++- .
Type++. 2
type++3 7
)++7 8
{,, 	
var-- 
projectName-- 
=-- 
Form1-- #
.--# $
frm--$ '
.--' (
txtProjectName--( 6
.--6 7
Text--7 ;
;--; <
var.. 
sb.. 
=.. 
new.. 
StringBuilder.. &
(..& '
)..' (
;..( )
var00 
props00 
=00 
type00 
.00 
GetProperties00 *
(00* +
)00+ ,
;00, -
var22 
idx22 
=22 
$num22 
;22 
var33 
str33 
=33 
type33 
.33 
Name33 
;33  
if44 
(44 
str44 
.44 
Length44 
>44 
str44  
.44  !
Length44! '
-44( )
$num44* +
&&44, .
str44/ 2
[442 3
str443 6
.446 7
Length447 =
-44> ?
$num44@ A
]44A B
==44C E
$char44F I
)44I J
{55 
sb66 
.66 

AppendLine66 
(66 
$"66  
	[Table(\"66  )
{66) *
type66* .
.66. /
Name66/ 3
}663 4
ies\")]664 ;
"66; <
)66< =
;66= >
}77 
else88 
{99 
sb:: 
.:: 

AppendLine:: 
(:: 
$"::  
	[Table(\"::  )
{::) *
type::* .
.::. /
Name::/ 3
}::3 4
s\")]::4 9
"::9 :
)::: ;
;::; <
};; 
sb== 
.== 

AppendLine== 
(== 
$"== 
[DisplayColumn(\"== -
{==- .
type==. 2
.==2 3
Name==3 7
}==7 8
Name\")]==8 @
"==@ A
)==A B
;==B C
sb>> 
.>> 

AppendLine>> 
(>> 
$">> 
[DisplayName(\">> +
{>>+ ,
type>>, 0
.>>0 1
Name>>1 5
}>>5 6
\")]>>6 :
">>: ;
)>>; <
;>>< =
sb?? 
.?? 

AppendLine?? 
(?? 
$"?? 
public class ?? )
{??) *
type??* .
.??. /
Name??/ 3
}??3 4
	ViewModel??4 =
"??= >
)??> ?
;??? @
sb@@ 
.@@ 

AppendLine@@ 
(@@ 
$str@@ 
)@@ 
;@@ 
foreachAA 
(AA 
varAA 
propAA 
inAA  
propsAA! &
)AA& '
{BB 
ifCC 
(CC 
idxCC 
==CC 
$numCC 
)CC 
{DD 
sbEE 
.EE 

AppendLineEE !
(EE! "
$strEE" ^
)EE^ _
;EE_ `
sbFF 
.FF 

AppendLineFF !
(FF! "
$"FF" $
[Display(Name = \"FF$ 6
{FF6 7
propFF7 ;
.FF; <
NameFF< @
}FF@ A.
" Id\", AutoGenerateField = false)]FFA c
"FFc d
)FFd e
;FFe f
sbGG 
.GG 
AppendGG 
(GG 
$"GG  
public virtual GG  /
{GG/ 0
propGG0 4
.GG4 5
PropertyTypeGG5 A
.GGA B
NameGGB F
.GGF G
ToLowerInvariantGGG W
(GGW X
)GGX Y
}GGY Z
{GG[ \
propGG\ `
.GG` a
NameGGa e
}GGe f
"GGf g
)GGg h
.GGh i
AppendGGi o
(GGo p
$strGGp 
)	GG 
.
GG 

AppendLine
GG 
(
GG 
$str
GG 
)
GG 
;
GG 
}HH 
elseII 
ifII 
(II 
propII 
.II 
NameII "
.II" #
ContainsII# +
(II+ ,
$strII, 0
)II0 1
)II1 2
{JJ 
sbKK 
.KK 

AppendLineKK !
(KK! "
$"KK" $
[Display(Name = \"KK$ 6
{KK6 7
propKK7 ;
.KK; <
NameKK< @
}KK@ A
\"), Required()]KKA Q
"KKQ R
)KKR S
;KKS T
sbLL 
.LL 
AppendLL 
(LL 
$"LL  
public virtual LL  /
{LL/ 0
propLL0 4
.LL4 5
PropertyTypeLL5 A
.LLA B
NameLLB F
.LLF G
ToLowerInvariantLLG W
(LLW X
)LLX Y
}LLY Z
{LL[ \
propLL\ `
.LL` a
NameLLa e
}LLe f
"LLf g
)LLg h
.LLh i
AppendLLi o
(LLo p
$strLLp 
)	LL 
.
LL 

AppendLine
LL 
(
LL 
$str
LL 
)
LL 
;
LL 
sbMM 
.MM 

AppendLineMM !
(MM! "
$"MM" $
[ForeignKey(\"MM$ 2
{MM2 3
propMM3 7
.MM7 8
NameMM8 <
}MM< =
\")]MM= A
"MMA B
)MMB C
;MMC D
sbNN 
.NN 
AppendNN 
(NN 
$"NN  
public virtual NN  /
{NN/ 0
propNN0 4
.NN4 5
NameNN5 9
.NN9 :
	SubstringNN: C
(NNC D
$numNND E
,NNE F
propNNG K
.NNK L
NameNNL P
.NNP Q
LengthNNQ W
-NNX Y
$numNNZ [
)NN[ \
}NN\ ]

ViewModel NN] g
{NNg h
propNNh l
.NNl m
NameNNm q
.NNq r
	SubstringNNr {
(NN{ |
$numNN| }
,NN} ~
prop	NN 
.
NN 
Name
NN 
.
NN 
Length
NN 
-
NN 
$num
NN 
)
NN 
}
NN 
"
NN 
)
NN 
.
NN 
Append
NN 
(
NN 
$str
NN ®
)
NN® ¯
.
NN¯ °

AppendLine
NN° º
(
NNº »
$str
NN» ½
)
NN½ ¾
;
NN¾ ¿
}OO 
elsePP 
ifPP 
(PP 
propPP 
.PP 
PropertyTypePP *
.PP* +
NamePP+ /
.PP/ 0
ToLowerInvariantPP0 @
(PP@ A
)PPA B
==PPC E
$strPPF N
)PPN O
{QQ 
sbRR 
.RR 

AppendLineRR !
(RR! "
$"RR" $#
[ScaffoldColumn(false)]RR$ ;
"RR; <
)RR< =
;RR= >
sbSS 
.SS 

AppendLineSS !
(SS! "
$"SS" $(
[Display(Name = \"YÃ¼kle\")]SS$ ?
"SS? @
)SS@ A
;SSA B
sbTT 
.TT 

AppendLineTT !
(TT! "
$strTT" ?
)TT? @
;TT@ A
sbUU 
.UU 
AppendUU 
(UU 
$"UU  
public virtual UU  /
{UU/ 0
propUU0 4
.UU4 5
PropertyTypeUU5 A
.UUA B
NameUUB F
.UUF G
ToLowerInvariantUUG W
(UUW X
)UUX Y
}UUY Z
{UU[ \
propUU\ `
.UU` a
NameUUa e
}UUe f
"UUf g
)UUg h
.UUh i
AppendUUi o
(UUo p
$strUUp 
)	UU 
.
UU 

AppendLine
UU 
(
UU 
$str
UU 
)
UU 
;
UU 
}VV 
elseWW 
ifWW 
(WW 
propWW 
.WW 
NameWW "
.WW" #
ContainsWW# +
(WW+ ,
$strWW, 6
)WW6 7
)WW7 8
{XX 
sbYY 
.YY 

AppendLineYY !
(YY! "
$"YY" $#
[ScaffoldColumn(false)]YY$ ;
"YY; <
)YY< =
;YY= >
sbZZ 
.ZZ 

AppendLineZZ !
(ZZ! "
$"ZZ" $2
&[Display(Name = \"Dosya UzantÄ±sÄ±\")]ZZ$ H
"ZZH I
)ZZI J
;ZZJ K
sb[[ 
.[[ 

AppendLine[[ !
([[! "
$str[[" 2
)[[2 3
;[[3 4
sb\\ 
.\\ 
Append\\ 
(\\ 
$"\\  
public virtual \\  /
{\\/ 0
prop\\0 4
.\\4 5
PropertyType\\5 A
.\\A B
Name\\B F
.\\F G
ToLowerInvariant\\G W
(\\W X
)\\X Y
}\\Y Z
{\\[ \
prop\\\ `
.\\` a
Name\\a e
}\\e f
"\\f g
)\\g h
.\\h i
Append\\i o
(\\o p
$str\\p 
)	\\ 
.
\\ 

AppendLine
\\ 
(
\\ 
$str
\\ 
)
\\ 
;
\\ 
}]] 
else^^ 
{__ 
sb`` 
.`` 

AppendLine`` !
(``! "
$"``" $
[Display(Name = \"``$ 6
{``6 7
prop``7 ;
.``; <
Name``< @
}``@ A
\"), Required()]``A Q
"``Q R
)``R S
;``S T
sbaa 
.aa 
Appendaa 
(aa 
$"aa  
public virtual aa  /
{aa/ 0
propaa0 4
.aa4 5
PropertyTypeaa5 A
.aaA B
NameaaB F
.aaF G
ToLowerInvariantaaG W
(aaW X
)aaX Y
}aaY Z
{aa[ \
propaa\ `
.aa` a
Nameaaa e
}aae f
"aaf g
)aag h
.aah i
Appendaai o
(aao p
$straap 
)	aa 
.
aa 

AppendLine
aa 
(
aa 
$str
aa 
)
aa 
;
aa 
}bb 
idxcc 
++cc 
;cc 
}dd 
returnff 
fmtClassFileff 
.gg 
Replacegg 
(gg 
$strgg &
,gg& '
typegg( ,
.gg, -
Namegg- 1
)gg1 2
.hh 
Replacehh 
(hh 
$strhh (
,hh( )
projectNamehh* 5
)hh5 6
.ii 
Replaceii 
(ii 
$strii !
,ii! "
sbii# %
.ii% &
ToStringii& .
(ii. /
)ii/ 0
.ii0 1
Replaceii1 8
(ii8 9
$strii9 @
,ii@ A
$striiB G
)iiG H
.kk 
Replacekk 
(kk 
$strkk $
,kk$ %
$strkk& +
)kk+ ,
)kk, -
;kk- .
}ll 	
constnn 
stringnn 
fmtClassFilenn !
=nn" #
$strnv$ 
;vv 
}ww 
}xx ã2
EE:\src\NewGenSource\BayiPuan\FwGen\EntityFrameworkMappingGenerator.cs
	namespace 	
FwGen
 
{ 
public 

class +
EntityFrameworkMappingGenerator 0
{		 
List

 
<

 
Type

 
>

 
types

 
=

 
new

 
List

 #
<

# $
Type

$ (
>

( )
(

) *
)

* +
;

+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
} 	
private 
void 
GenerateClassFiles '
(' (
string( .
path/ 3
)3 4
{   	
foreach!! 
(!! 
var!! 
type!! 
in!!  
types!!! &
)!!& '
{"" 
var## 
content## 
=## "
GenerateClassFilesType## 4
(##4 5
type##5 9
)##9 :
;##: ;
if$$ 
($$ 
!$$ 
type$$ 
.$$ 
FullName$$ "
.$$" #
Contains$$# +
($$+ ,
$str$$, 9
)$$9 :
)$$: ;
File%% 
.%% 
WriteAllText%% %
(%%% &
path%%& *
+%%+ ,
type%%- 1
.%%1 2
Name%%2 6
+%%7 8
$str%%9 A
,%%A B
content%%C J
,%%J K
System%%L R
.%%R S
Text%%S W
.%%W X
Encoding%%X `
.%%` a
UTF8%%a e
)%%e f
;%%f g
}&& 
}'' 	
private)) 
string)) "
GenerateClassFilesType)) -
())- .
Type)). 2
type))3 7
)))7 8
{** 	
var++ 
projectName++ 
=++ 
Form1++ #
.++# $
frm++$ '
.++' (
txtProjectName++( 6
.++6 7
Text++7 ;
;++; <
var,, 
sb,, 
=,, 
new,, 
StringBuilder,, &
(,,& '
),,' (
;,,( )
var.. 
props.. 
=.. 
type.. 
... 
GetProperties.. *
(..* +
)..+ ,
;.., -
var// 
idx// 
=// 
$num// 
;// 
var00 
str00 
=00 
type00 
.00 
Name00 
;00  
if11 
(11 
str11 
[11 
str11 
.11 
Length11 
-11  
$num11! "
]11" #
==11$ &
$char11' *
)11* +
{22 
str33 
=33 
str33 
.33 
Replace33 !
(33! "
$str33" %
,33% &
$str33' ,
)33, -
;33- .
sb44 
.44 

AppendLine44 
(44 
$"44  
ToTable(@\"44  +
{44+ ,
str44, /
}44/ 0
\",\"dbo\");440 <
"44< =
)44= >
;44> ?
}55 
else66 
{77 
sb88 
.88 

AppendLine88 
(88 
$"88  

ToTable(\"88  *
{88* +
str88+ .
}88. /
s\",\"dbo\");88/ <
"88< =
)88= >
;88> ?
}99 
foreach<< 
(<< 
var<< 
prop<< 
in<<  
props<<! &
)<<& '
{== 
if?? 
(?? 
idx?? 
==?? 
$num?? 
)?? 
sb@@ 
.@@ 

AppendLine@@ !
(@@! "
$"@@" $
HasKey(x => x.@@$ 2
{@@2 3
prop@@3 7
.@@7 8
Name@@8 <
}@@< =
);@@= ?
"@@? @
)@@@ A
;@@A B
sbBB 
.BB 

AppendLineBB !
(BB! "
$"BB" $
Property(x => x.BB$ 4
{BB4 5
propBB5 9
.BB9 :
NameBB: >
}BB> ?
).HasColumnName(\"BB? Q
{BBQ R
propBBR V
.BBV W
NameBBW [
}BB[ \
\");BB\ `
"BB` a
)BBa b
;BBb c
idxCC 
++CC 
;CC 
}DD 
returnFF 
fmtClassFileFF 
.GG 
ReplaceGG 
(GG 
$strGG &
,GG& '
typeGG( ,
.GG, -
NameGG- 1
)GG1 2
.HH 
ReplaceHH 
(HH 
$strHH '
,HH' (
strHH) ,
)HH, -
.II 
ReplaceII 
(II 
$strII (
,II( )
projectNameII* 5
)II5 6
.JJ 
ReplaceJJ 
(JJ 
$strJJ !
,JJ! "
sbJJ# %
.JJ% &
ToStringJJ& .
(JJ. /
)JJ/ 0
)JJ0 1
;JJ1 2
}KK 	
constMM 
stringMM 
fmtClassFileMM !
=MM" #
$strMY$ 
;YY 
}ZZ 
}[[ ¦4
?E:\src\NewGenSource\BayiPuan\FwGen\HibernateMappingGenerator.cs
	namespace 	
FwGen
 
{ 
public 

class %
HibernateMappingGenerator *
{		 
List

 
<

 
Type

 
>

 
types

 
=

 
new

 
List

 #
<

# $
Type

$ (
>

( )
(

) *
)

* +
;

+ ,
public 
void 
Add 
< 
T 
> 
( 
) 
{ 	
Add 
( 
typeof 
( 
T 
) 
) 
; 
} 	
public 
void 
Add 
( 
Type 
t 
) 
{ 	
if 
( 
! 
types 
. 
Contains 
(  
t  !
)! "
)" #
types 
. 
Add 
( 
t 
) 
; 
} 	
public 
void 
Generate 
( 
string #
path$ (
)( )
{ 	
if 
( 
! 
path 
. 
EndsWith 
( 
$str #
)# $
)$ %
path& *
+=+ -
$str. 2
;2 3
if 
( 
! 
	Directory 
. 
Exists !
(! "
path" &
)& '
)' (
	Directory 
. 
CreateDirectory )
() *
path* .
). /
;/ 0
GenerateClassFiles 
( 
path #
)# $
;$ %
} 	
private 
void 
GenerateClassFiles '
(' (
string( .
path/ 3
)3 4
{   	
foreach!! 
(!! 
var!! 
type!! 
in!!  
types!!! &
)!!& '
{"" 
var## 
content## 
=## "
GenerateClassFilesType## 4
(##4 5
type##5 9
)##9 :
;##: ;
if$$ 
($$ 
!$$ 
type$$ 
.$$ 
FullName$$ "
.$$" #
Contains$$# +
($$+ ,
$str$$, 9
)$$9 :
)$$: ;
File%% 
.%% 
WriteAllText%% %
(%%% &
path%%& *
+%%+ ,
type%%- 1
.%%1 2
Name%%2 6
+%%7 8
$str%%9 A
,%%A B
content%%C J
,%%J K
System%%L R
.%%R S
Text%%S W
.%%W X
Encoding%%X `
.%%` a
UTF8%%a e
)%%e f
;%%f g
}&& 
}'' 	
private)) 
string)) "
GenerateClassFilesType)) -
())- .
Type)). 2
type))3 7
)))7 8
{** 	
var++ 
sb++ 
=++ 
new++ 
StringBuilder++ &
(++& '
)++' (
;++( )
var-- 
props-- 
=-- 
type-- 
.-- 
GetProperties-- *
(--* +
)--+ ,
;--, -
var.. 
idx.. 
=.. 
$num.. 
;.. 
var// 
str// 
=// 
type// 
.// 
Name// 
;//  
if00 
(00 
str00 
[00 
str00 
.00 
Length00 
-00  
$num00! "
]00" #
==00$ &
$char00' *
)00* +
{11 
str22 
=22 
str22 
.22 
Replace22 !
(22! "
$str22" %
,22% &
$str22' ,
)22, -
;22- .
sb33 
.33 

AppendLine33 
(33 
$"33  
Table(\"33  (
{33( )
str33) ,
}33, -
\");33- 1
"331 2
)332 3
;333 4
}44 
else55 
{66 
sb77 
.77 

AppendLine77 
(77 
$"77  
Table(\"77  (
{77( )
str77) ,
}77, -
s\");77- 2
"772 3
)773 4
;774 5
}88 
sb:: 
.:: 

AppendLine:: 
(:: 
$str:: '
)::' (
;::( )
foreach;; 
(;; 
var;; 
prop;; 
in;;  
props;;! &
);;& '
{<< 
if>> 
(>> 
idx>> 
==>> 
$num>> 
)>> 
sb?? 
.?? 

AppendLine?? !
(??! "
$"??" $

Id(x => x.??$ .
{??. /
prop??/ 3
.??3 4
Name??4 8
}??8 9
).Column(\"??9 D
{??D E
prop??E I
.??I J
Name??J N
}??N O
\");??O S
"??S T
)??T U
;??U V
else@@ 
sbAA 
.AA 

AppendLineAA !
(AA! "
$"AA" $
Map(x => x.AA$ /
{AA/ 0
propAA0 4
.AA4 5
NameAA5 9
}AA9 :
).Column(\"AA: E
{AAE F
propAAF J
.AAJ K
NameAAK O
}AAO P
\");AAP T
"AAT U
)AAU V
;AAV W
idxBB 
++BB 
;BB 
}CC 
varDD 
projectNameDD 
=DD 
Form1DD #
.DD# $
frmDD$ '
.DD' (
txtProjectNameDD( 6
.DD6 7
TextDD7 ;
;DD; <
returnEE 
fmtClassFileEE 
.FF 
ReplaceFF 
(FF 
$strFF &
,FF& '
typeFF( ,
.FF, -
NameFF- 1
)FF1 2
.GG 
ReplaceGG 
(GG 
$strGG '
,GG' (
strGG) ,
)GG, -
.HH 
ReplaceHH 
(HH 
$strHH (
,HH( )
projectNameHH* 5
)HH5 6
.II 
ReplaceII 
(II 
$strII !
,II! "
sbII# %
.II% &
ToStringII& .
(II. /
)II/ 0
)II0 1
;II1 2
}JJ 	
constLL 
stringLL 
fmtClassFileLL !
=LL" #
$strLX$ 
;XX 
}YY 
}ZZ ¨
-E:\src\NewGenSource\BayiPuan\FwGen\Program.cs
	namespace 	
FwGen
 
{ 
static		 

class		 
Program		 
{

 
[ 	
	STAThread	 
] 
static 
void 
Main 
( 
) 
{ 	
Application 
. 
EnableVisualStyles *
(* +
)+ ,
;, -
Application 
. -
!SetCompatibleTextRenderingDefault 9
(9 :
false: ?
)? @
;@ A
Application 
. 
Run 
( 
new 
Form1  %
(% &
)& '
)' (
;( )
} 	
} 
} è
=E:\src\NewGenSource\BayiPuan\FwGen\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str  
)  !
]! "
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str "
)" #
]# $
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *